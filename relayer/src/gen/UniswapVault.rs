#[allow(dead_code)]
mod uniswap_vault {
    # [rustfmt :: skip] use ethcontract as ethcontract ;
    #[doc = "Generated by `ethcontract`"]
    #[derive(Clone)]
    pub struct Contract {
        methods: Methods,
    }
    impl Contract {
        #[doc = r" Retrieves the raw contract instance used to generate the type safe"]
        #[doc = r" API for this contract."]
        pub fn raw_contract() -> &'static self::ethcontract::Contract {
            use self::ethcontract::common::artifact::truffle::TruffleLoader;
            use self::ethcontract::private::lazy_static;
            use self::ethcontract::Contract;
            lazy_static! {
                pub static ref CONTRACT: Contract = {
                    # [allow (unused_mut)] let mut contract = TruffleLoader :: new () . load_contract_from_str ("{\"contractName\":\"UniswapVault\",\"abi\":[{\"type\":\"function\",\"name\":\"openPosition\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"positionType\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getConfig\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"_chainId\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_configType\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdrawNativeToken\",\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"_sqrtPriceLimitX96toUni\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSendVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalUSDCValue\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"forceResumeReceive\",\"inputs\":[{\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"closePosition\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"nativeRouter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setReceiveVersion\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"repay\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"adjustPosition\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setNativeLZEndpoint\",\"inputs\":[{\"name\":\"_endpoint\",\"type\":\"address\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getReserve\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bridgeToRouterBack\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"setRemote\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint16\"},{\"name\":\"remoteAddress\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"remotes\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_feeToPair\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nativeBridge\",\"inputs\":[{\"name\":\"actionData\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"backTokensToNative\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOutboundConfirmations\",\"inputs\":[{\"name\":\"remoteChainId\",\"type\":\"uint16\"},{\"name\":\"confirmations\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSendVersion\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slippageTolerance\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stringToBytes32\",\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"constant\":false,\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"setInboundConfirmations\",\"inputs\":[{\"name\":\"remoteChainId\",\"type\":\"uint16\"},{\"name\":\"confirmations\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfig\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"_chainId\",\"type\":\"uint16\"},{\"name\":\"_configType\",\"type\":\"uint256\"},{\"name\":\"_config\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"borrow\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_wToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getReceiveVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdrawUSDC\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_usdcToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"deCommasStrategyRouter_\",\"type\":\"address\"},{\"name\":\"uniswapRouterV3_\",\"type\":\"address\"},{\"name\":\"usdcToken_\",\"type\":\"address\"},{\"name\":\"wToken_\",\"type\":\"address\"},{\"name\":\"feeToPair_\",\"type\":\"uint24\"},{\"name\":\"deadlineTime_\",\"type\":\"uint160\"},{\"name\":\"sqrtPriceLimitX96toUni_\",\"type\":\"uint160\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setBridge\",\"inputs\":[{\"name\":\"actionData\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"submitNativeToken\",\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_deadlineTime\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setNativeRouter\",\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateSwapInfo\",\"inputs\":[{\"name\":\"feeToPair_\",\"type\":\"uint24\"},{\"name\":\"deadlineTime_\",\"type\":\"uint160\"},{\"name\":\"sqrtPriceLimitX96toUni_\",\"type\":\"uint160\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"lzReceive\",\"inputs\":[{\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"payload\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_deCommasStrategyRouter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Bridged\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token1\",\"type\":\"address\",\"indexed\":false},{\"name\":\"token2\",\"type\":\"address\",\"indexed\":false},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Bridged\",\"inputs\":[{\"name\":\"receiverLZId\",\"type\":\"uint16\",\"indexed\":true},{\"name\":\"receiverAddress\",\"type\":\"address\",\"indexed\":true},{\"name\":\"stableAmount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PositionAdjusted\",\"inputs\":[{\"name\":\"operationType\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"usdcAmount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"ethAmount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TransferredToNativeRouter\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RouterChanged\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false},{\"name\":\"oldRelayer\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newRelayer\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"USDCWithdrawn\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"USDCDeposited\",\"inputs\":[{\"name\":\"timeStamp\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"receive\"},{\"type\":\"fallback\"}],\"bytecode\":\"608060405234801561001057600080fd5b506139cb806100206000396000f3fe6080604052600436106102f15760003560e01c8063715018a61161018d578063c704adb6116100e0578063e6e6a9e11161008f578063f2fde38b1161006c578063f2fde38b14610970578063f5ecbdbc14610990578063f8630611146109b0578063f95dcc0a1461096257005b8063e6e6a9e114610922578063eac3c59614610942578063eeecd9ba1461096257005b8063cf5d1471116100bd578063cf5d1471146108d2578063cfb51928146108e7578063d03153aa1461090757005b8063c704adb614610892578063cbed8b9c146108b2578063cee94463146103f157005b806398b1e06a1161013c578063ab32f45211610119578063ab32f452146103f1578063b561fd2b146103f1578063bd8a536b1461086557005b806398b1e06a146107eb5780639ae58a021461080b5780639d1f61131461083857005b80638923d5a21161016a5780638923d5a2146106d55780638da5cb5b146107025780639882876c1461072d57005b8063715018a6146106ab5780637a1ee1c0146103f15780638456cb59146106c057005b806342d65a8d116102455780636b0365c3116101f45780636fee785f116101d15780636fee785f1461061657806370a082311461062957806370dc5ec91461064957005b80636b0365c3146105b65780636cb6fe7f146105d65780636df65371146105f657005b806359bf5d391161022257806359bf5d39146105435780635af54088146105665780635c975abb1461059357005b806342d65a8d146104b357806343722e4b146104d357806354a5beda1461051b57005b806322a168f0116102a157806337463e1d1161027e57806337463e1d1461045e578063389055eb1461047e5780633f4ba83a1461049e57005b806322a168f0146103f1578063266ce3fe146104115780632b2257dc1461043e57005b80630881921a116102cf5780630881921a1461035a57806310ddb137146103b157806320cdd0a1146103d157005b80621d3567146102fa578063019d27291461031a57806307e0db171461033a57005b366102f857005b005b34801561030657600080fd5b506102f8610315366004612fba565b6109c5565b34801561032657600080fd5b506102f861033536600461304a565b610aec565b34801561034657600080fd5b506102f861035536600461307f565b610bae565b34801561036657600080fd5b50609f546103879073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156103bd57600080fd5b506102f86103cc36600461307f565b610c32565b3480156103dd57600080fd5b506102f86103ec36600461309c565b610c8c565b3480156103fd57600080fd5b506102f861040c36600461311c565b610cb5565b34801561041d57600080fd5b5060a0546103879073ffffffffffffffffffffffffffffffffffffffff1681565b34801561044a57600080fd5b506102f861045936600461315e565b610d17565b34801561046a57600080fd5b506102f861047936600461304a565b610e2a565b34801561048a57600080fd5b506102f86104993660046131af565b6110d7565b3480156104aa57600080fd5b506102f86114a5565b3480156104bf57600080fd5b506102f86104ce36600461328c565b6114b7565b3480156104df57600080fd5b50609f546105079074010000000000000000000000000000000000000000900462ffffff1681565b60405162ffffff90911681526020016103a8565b34801561052757600080fd5b50610530611548565b60405161ffff90911681526020016103a8565b34801561054f57600080fd5b506105586115e1565b6040519081526020016103a8565b34801561057257600080fd5b5060a1546103879073ffffffffffffffffffffffffffffffffffffffff1681565b34801561059f57600080fd5b5060655460ff1660405190151581526020016103a8565b3480156105c257600080fd5b506102f86105d136600461304a565b611674565b3480156105e257600080fd5b506102f86105f136600461304a565b6117da565b34801561060257600080fd5b506102f861061136600461315e565b61183f565b6102f861062436600461304a565b6118fa565b34801561063557600080fd5b506105586106443660046132e1565b611ae1565b34801561065557600080fd5b506102f86106643660046132e1565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3480156106b757600080fd5b506102f8611b78565b3480156106cc57600080fd5b506102f8611b8a565b3480156106e157600080fd5b50609e546103879073ffffffffffffffffffffffffffffffffffffffff1681565b34801561070e57600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff16610387565b34801561073957600080fd5b506102f86107483660046132fe565b609f805462ffffff90941674010000000000000000000000000000000000000000027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff9094169390931790925560a1805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560a08054939092169216919091179055565b3480156107f757600080fd5b506102f861080636600461304a565b611b9a565b34801561081757600080fd5b50609b546103879073ffffffffffffffffffffffffffffffffffffffff1681565b34801561084457600080fd5b5061085861085336600461307f565b611d7b565b6040516103a891906133b6565b34801561087157600080fd5b50609c546103879073ffffffffffffffffffffffffffffffffffffffff1681565b34801561089e57600080fd5b506102f86108ad36600461304a565b611e15565b3480156108be57600080fd5b506102f86108cd3660046133c9565b611eb8565b3480156108de57600080fd5b50610530611faf565b3480156108f357600080fd5b5061055861090236600461343c565b612006565b34801561091357600080fd5b5061055866b1a2bc2ec5000081565b34801561092e57600080fd5b506102f861093d3660046132e1565b612020565b34801561094e57600080fd5b506102f861095d36600461304a565b6120cc565b6102f861040c36600461311c565b34801561097c57600080fd5b506102f861098b3660046132e1565b6121da565b34801561099c57600080fd5b506108586109ab366004613485565b61228e565b3480156109bc57600080fd5b506105586123e4565b600080828060200190518101906109dc919061351b565b915091508161ffff16600114156109fb576109f6816123ee565b610ae4565b8161ffff1660021415610a7d576000803073ffffffffffffffffffffffffffffffffffffffff1683604051610a309190613562565b6000604051808303816000865af19150503d8060008114610a6d576040519150601f19603f3d011682016040523d82523d6000602084013e610a72565b606091505b50610ae49350505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f556e737570706f7274656420666c61672074797065000000000000000000000060448201526064015b60405180910390fd5b505050505050565b600080600083806020019051810190610b05919061357e565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526024820183905293965091945092509084169063095ea7b3906044016020604051808303816000875af1158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba791906135c1565b5050505050565b6097546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff8316600482015273ffffffffffffffffffffffffffffffffffffffff909116906307e0db17906024015b600060405180830381600087803b158015610c1e57600080fd5b505af1158015610ba7573d6000803e3d6000fd5b6097546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff8316600482015273ffffffffffffffffffffffffffffffffffffffff909116906310ddb13790602401610c04565b61ffff821660009081526098602090815260409091208251610cb092840190612def565b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f556e737570706f72746564206f7065726174696f6e2e000000000000000000006044820152606401610adb565b610d1f6125c6565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063cbed8b9c90829063096568f690602401602060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db991906135de565b6040805161ffff861660208201528691600591015b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610dfc94939291906135fb565b600060405180830381600087803b158015610e1657600080fd5b505af1158015610ae4573d6000803e3d6000fd5b610e32612647565b600081806020019051810190610e489190613632565b905080610eb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f446350564c543a207a65726f20616d6f756e74000000000000000000000000006044820152606401610adb565b6000610ebb6115e1565b610ec5908361367a565b90506000610ee3610ed46123e4565b83670de0b6b3a76400006126b4565b9050610eed6123e4565b811115610f7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f446350564c543a20747279696e6720746f207769746864726177206d6f72652060448201527f7468616e20706f6f6c20636f6e7461696e7300000000000000000000000000006064820152608401610adb565b609e5473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af115801561100d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103191906135c1565b611097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f446350564c543a2075736463207472616e73666572206661696c6564000000006044820152606401610adb565b60408051338152602081018390527f2aa7fb97600ea702b454359fc3d02ae9fa48367e7155505d38cee896e5b5aae791015b60405180910390a150505050565b600054610100900460ff16158080156110f75750600054600160ff909116105b806111115750303b158015611111575060005460ff166001145b61119d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610adb565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156111fb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61120361284e565b61120b6128ed565b609c805473ffffffffffffffffffffffffffffffffffffffff8a81167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255609d80548a84169083168117909155609e80548a85169084168117909155609f805462ffffff8a1674010000000000000000000000000000000000000000027fffffffffffffffffff00000000000000000000000000000000000000000000009091168b87161717905560a1805488861690851617905560a0805494871694909316939093179091556040517f095ea7b300000000000000000000000000000000000000000000000000000000815260048101919091527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015263095ea7b3906044016020604051808303816000875af1158015611354573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137891906135c1565b50609f54609d546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015291169063095ea7b3906044016020604051808303816000875af1158015611413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143791906135c1565b50801561149b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6114ad6125c6565b6114b561298c565b565b6097546040517f42d65a8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906342d65a8d90611511908690869086906004016136fe565b600060405180830381600087803b15801561152b57600080fd5b505af115801561153f573d6000803e3d6000fd5b50505050505050565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff169063096568f6906024015b602060405180830381865afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc91906135de565b905090565b609e546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc9190613632565b61167c612647565b60008082806020019051810190611693919061371c565b915091508060001415611702576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f446350564c543a207a65726f20616d6f756e74000000000000000000000000006044820152606401610adb565b811561177857609e54609f546000916117359173ffffffffffffffffffffffffffffffffffffffff918216911684612a09565b604080518515158152602081018590529081018290529091507f7d8e9ed17079539c848b4b8d7cc47b423626aaab72ad4e35c2f1d8bc91e0d80c906060016110c9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152606401610adb565b6000818060200190518101906117f0919061374a565b6099805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff9092169190911790555050565b6118476125c6565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063cbed8b9c90829063096568f690602401602060405180830381865afa1580156118bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e191906135de565b6040805161ffff86166020820152869160029101610dce565b611902612647565b6000806000806000808680602001905181019061191f9190613767565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015260248201839052969c50949a50929850909650945092509086169063095ea7b3906044016020604051808303816000875af11580156119a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c991906135c1565b506040517f0a78909d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820183905261ffff8816604483015283811660648301528581166084830152841690630a78909d90349060a4016000604051808303818588803b158015611a5557600080fd5b505af1158015611a69573d6000803e3d6000fd5b50506040805185815273ffffffffffffffffffffffffffffffffffffffff808b166020830152808a169282019290925290861660608201527f9d675debde0a6a6ed7d472fb868b6bde1e804190ef4cff20e691600a5fdb869593506080019150611ad09050565b60405180910390a150505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b729190613632565b92915050565b611b806125c6565b6114b56000612b50565b611b926125c6565b6114b5612bc7565b611ba2612647565b600081806020019051810190611bb89190613632565b905080611c21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f446350564c543a207a65726f20616d6f756e74000000000000000000000000006044820152606401610adb565b609e5473ffffffffffffffffffffffffffffffffffffffff166323b872dd336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064016020604051808303816000875af1158015611cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdc91906135c1565b611d42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f446350564c543a2075736463207472616e73666572206661696c6564000000006044820152606401610adb565b60405181815233907f80ecc532cf2e08856601df42646970d676a686d8eeacbfd2038fae4ff288da569060200160405180910390a25050565b60986020526000908152604090208054611d94906137e4565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc0906137e4565b8015611e0d5780601f10611de257610100808354040283529160200191611e0d565b820191906000526020600020905b815481529060010190602001808311611df057829003601f168201915b505050505081565b609a5473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611eac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4242423a73656e6465722069736e277420616374696f6e506f6f6c00000000006044820152606401610adb565b611eb5816123ee565b50565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063cbed8b9c90829063096568f690602401602060405180830381865afa158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5291906135de565b868686866040518663ffffffff1660e01b8152600401611f76959493929190613832565b600060405180830381600087803b158015611f9057600080fd5b505af1158015611fa4573d6000803e3d6000fd5b505050505050505050565b6097546040517fda1a7c9a00000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff169063da1a7c9a9060240161159b565b8051600090829061201a5750600092915050565b50919050565b609b805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831617909255167f32cc61188939cfc970a82c25bd6c245bc36e6e661ce944cafd311911d168dee061208c3390565b609b546040805173ffffffffffffffffffffffffffffffffffffffff93841681528386166020820152929091169082015260600160405180910390a15050565b600080828060200190518101906120e3919061386b565b609b546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810183905292945090925083169063a9059cbb906044016020604051808303816000875af1158015612161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218591906135c1565b506040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fcb6b8677a0c545bc7fe33c1031a108894ae8ee3ee432d815343783c94c45e294910160405180910390a1505050565b6121e26125c6565b73ffffffffffffffffffffffffffffffffffffffff8116612285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610adb565b611eb581612b50565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015260609173ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90829063096568f690602401602060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232991906135de565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9182166004820152908716602482015230604482015260648101859052608401600060405180830381865afa158015612395573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526123db9190810190613889565b95945050505050565b60006115dc6115e1565b60008060008060008580602001905181019061240a91906138be565b6099546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff620100009092048216600482015260248101869052959a509398509196509450925086169063095ea7b3906044016020604051808303816000875af1158015612495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b991906135c1565b506099546040517f0a78909d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301526024820187905261ffff86166044830152848116606483015283811660848301526201000090920490911690630a78909d90479060a4016000604051808303818588803b15801561255057600080fd5b505af1158015612564573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff168361ffff167f80f089699fd0f2bd2beca5e14f9f10f1f9c66b611430a42b0826fe0daf3f22cb866040516125b691815260200190565b60405180910390a3505050505050565b60335473ffffffffffffffffffffffffffffffffffffffff1633146114b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610adb565b60655460ff16156114b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610adb565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561270c576000841161270157600080fd5b508290049050612847565b80841161271857600080fd5b600084868809808403938111909203919050600061273886196001613929565b86169586900495938490049360008190030460010190506127598184613941565b90931792600061276a876003613941565b60021890506127798188613941565b61278490600261397e565b61278e9082613941565b905061279a8188613941565b6127a590600261397e565b6127af9082613941565b90506127bb8188613941565b6127c690600261397e565b6127d09082613941565b90506127dc8188613941565b6127e790600261397e565b6127f19082613941565b90506127fd8188613941565b61280890600261397e565b6128129082613941565b905061281e8188613941565b61282990600261397e565b6128339082613941565b905061283f8186613941565b955050505050505b9392505050565b600054610100900460ff166128e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610adb565b6114b5612c22565b600054610100900460ff16612984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610adb565b6114b5612cc2565b612994612d83565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b609d54604080516101008101825273ffffffffffffffffffffffffffffffffffffffff868116825285811660208301908152609f5474010000000000000000000000000000000000000000900462ffffff9081168486019081523060608601908152426080870190815260a08088018b8152600060c08a018181529254891660e08b019081529a517f414bf3890000000000000000000000000000000000000000000000000000000081529951891660048b01529651881660248a0152935190941660448801529051851660648701525160848601525160a48501525160c48401529251811660e48301529192919091169063414bf38990610104016020604051808303816000875af1158015612b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b489190613632565b949350505050565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612bcf612647565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129df3390565b600054610100900460ff16612cb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610adb565b6114b533612b50565b600054610100900460ff16612d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610adb565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60655460ff166114b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610adb565b828054612dfb906137e4565b90600052602060002090601f016020900481019282612e1d5760008555612e63565b82601f10612e3657805160ff1916838001178555612e63565b82800160010185558215612e63579182015b82811115612e63578251825591602001919060010190612e48565b50612e6f929150612e73565b5090565b5b80821115612e6f5760008155600101612e74565b61ffff81168114611eb557600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612f0e57612f0e612e98565b604052919050565b600067ffffffffffffffff821115612f3057612f30612e98565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000612f6f612f6a84612f16565b612ec7565b9050828152838383011115612f8357600080fd5b828260208301376000602084830101529392505050565b600082601f830112612fab57600080fd5b61284783833560208501612f5c565b60008060008060808587031215612fd057600080fd5b8435612fdb81612e88565b9350602085013567ffffffffffffffff80821115612ff857600080fd5b61300488838901612f9a565b945060408701359150808216821461301b57600080fd5b9092506060860135908082111561303157600080fd5b5061303e87828801612f9a565b91505092959194509250565b60006020828403121561305c57600080fd5b813567ffffffffffffffff81111561307357600080fd5b612b4884828501612f9a565b60006020828403121561309157600080fd5b813561284781612e88565b600080604083850312156130af57600080fd5b82356130ba81612e88565b9150602083013567ffffffffffffffff8111156130d657600080fd5b6130e285828601612f9a565b9150509250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114611eb557600080fd5b8015158114611eb557600080fd5b60008060006060848603121561313157600080fd5b833561313c816130ec565b92506020840135915060408401356131538161310e565b809150509250925092565b6000806040838503121561317157600080fd5b823561317c81612e88565b9150602083013561318c81612e88565b809150509250929050565b803562ffffff811681146131aa57600080fd5b919050565b600080600080600080600060e0888a0312156131ca57600080fd5b87356131d5816130ec565b965060208801356131e5816130ec565b955060408801356131f5816130ec565b94506060880135613205816130ec565b935061321360808901613197565b925060a0880135613223816130ec565b915060c0880135613233816130ec565b8091505092959891949750929550565b60008083601f84011261325557600080fd5b50813567ffffffffffffffff81111561326d57600080fd5b60208301915083602082850101111561328557600080fd5b9250929050565b6000806000604084860312156132a157600080fd5b83356132ac81612e88565b9250602084013567ffffffffffffffff8111156132c857600080fd5b6132d486828701613243565b9497909650939450505050565b6000602082840312156132f357600080fd5b8135612847816130ec565b60008060006060848603121561331357600080fd5b61331c84613197565b9250602084013561332c816130ec565b91506040840135613153816130ec565b60005b8381101561335757818101518382015260200161333f565b83811115613366576000848401525b50505050565b6000815180845261338481602086016020860161333c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612847602083018461336c565b6000806000806000608086880312156133e157600080fd5b85356133ec81612e88565b945060208601356133fc81612e88565b935060408601359250606086013567ffffffffffffffff81111561341f57600080fd5b61342b88828901613243565b969995985093965092949392505050565b60006020828403121561344e57600080fd5b813567ffffffffffffffff81111561346557600080fd5b8201601f8101841361347657600080fd5b612b4884823560208401612f5c565b6000806000806080858703121561349b57600080fd5b84356134a681612e88565b935060208501356134b681612e88565b925060408501356134c6816130ec565b9396929550929360600135925050565b600082601f8301126134e757600080fd5b81516134f5612f6a82612f16565b81815284602083860101111561350a57600080fd5b612b4882602083016020870161333c565b6000806040838503121561352e57600080fd5b825161353981612e88565b602084015190925067ffffffffffffffff81111561355657600080fd5b6130e2858286016134d6565b6000825161357481846020870161333c565b9190910192915050565b60008060006060848603121561359357600080fd5b835161359e816130ec565b60208501519093506135af816130ec565b80925050604084015190509250925092565b6000602082840312156135d357600080fd5b81516128478161310e565b6000602082840312156135f057600080fd5b815161284781612e88565b600061ffff808716835280861660208401525083604083015260806060830152613628608083018461336c565b9695505050505050565b60006020828403121561364457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000826136b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff841681526040602082015260006123db6040830184866136b5565b6000806040838503121561372f57600080fd5b825161373a8161310e565b6020939093015192949293505050565b60006020828403121561375c57600080fd5b8151612847816130ec565b60008060008060008060c0878903121561378057600080fd5b865161378b81612e88565b602088015190965061379c816130ec565b60408801519095506137ad816130ec565b60608801519094506137be816130ec565b60808801519093506137cf816130ec565b8092505060a087015190509295509295509295565b600181811c908216806137f857607f821691505b6020821081141561201a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600061ffff8088168352808716602084015250846040830152608060608301526138606080830184866136b5565b979650505050505050565b6000806040838503121561387e57600080fd5b825161373a816130ec565b60006020828403121561389b57600080fd5b815167ffffffffffffffff8111156138b257600080fd5b612b48848285016134d6565b600080600080600060a086880312156138d657600080fd5b85516138e1816130ec565b6020870151604088015191965094506138f981612e88565b606087015190935061390a816130ec565b608087015190925061391b816130ec565b809150509295509295909350565b6000821982111561393c5761393c61364b565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156139795761397961364b565b500290565b6000828210156139905761399061364b565b50039056fea2646970667358221220fd001cd5adbbf4ae7a8dd24d5d1fd111c0069d252a6dd8283496251333b5628464736f6c634300080c0033\",\"networks\":{},\"devdoc\":{\"details\":null,\"methods\":{}},\"userdoc\":{\"details\":null,\"methods\":{}}}") . expect ("valid contract JSON") ;
                    contract
                };
            }
            &CONTRACT
        }
        #[doc = r" Creates a new contract instance with the specified `web3`"]
        #[doc = r" provider at the given `Address`."]
        #[doc = r""]
        #[doc = r" Note that this does not verify that a contract with a matching"]
        #[doc = r" `Abi` is actually deployed at the given address."]
        pub fn at<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
            address: self::ethcontract::Address,
        ) -> Self
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            Contract::with_deployment_info(web3, address, None)
        }
        #[doc = r" Creates a new contract instance with the specified `web3` provider with"]
        #[doc = r" the given `Abi` at the given `Address` and an optional transaction hash."]
        #[doc = r" This hash is used to retrieve contract related information such as the"]
        #[doc = r" creation block (which is useful for fetching all historic events)."]
        #[doc = r""]
        #[doc = r" Note that this does not verify that a contract with a matching `Abi` is"]
        #[doc = r" actually deployed at the given address nor that the transaction hash,"]
        #[doc = r" when provided, is actually for this contract deployment."]
        pub fn with_deployment_info<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
            address: self::ethcontract::Address,
            deployment_information: Option<ethcontract::common::DeploymentInformation>,
        ) -> Self
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            use self::ethcontract::transport::DynTransport;
            use self::ethcontract::web3::api::Web3;
            use self::ethcontract::Instance;
            let transport = DynTransport::new(web3.transport().clone());
            let web3 = Web3::new(transport);
            let abi = Self::raw_contract().abi.clone();
            let instance =
                Instance::with_deployment_info(web3, abi, address, deployment_information);
            Contract::from_raw(instance)
        }
        #[doc = r" Creates a contract from a raw instance."]
        fn from_raw(instance: self::ethcontract::dyns::DynInstance) -> Self {
            let methods = Methods { instance };
            Contract { methods }
        }
        #[doc = r" Returns the contract address being used by this instance."]
        pub fn address(&self) -> self::ethcontract::Address {
            self.raw_instance().address()
        }
        #[doc = r" Returns the deployment information of the contract"]
        #[doc = r" if it is known, `None` otherwise."]
        pub fn deployment_information(&self) -> Option<ethcontract::common::DeploymentInformation> {
            self.raw_instance().deployment_information()
        }
        #[doc = r" Returns a reference to the default method options used by this"]
        #[doc = r" contract."]
        pub fn defaults(&self) -> &self::ethcontract::contract::MethodDefaults {
            &self.raw_instance().defaults
        }
        #[doc = r" Returns a mutable reference to the default method options used"]
        #[doc = r" by this contract."]
        pub fn defaults_mut(&mut self) -> &mut self::ethcontract::contract::MethodDefaults {
            &mut self.raw_instance_mut().defaults
        }
        #[doc = r" Returns a reference to the raw runtime instance used by this"]
        #[doc = r" contract."]
        pub fn raw_instance(&self) -> &self::ethcontract::dyns::DynInstance {
            &self.methods.instance
        }
        #[doc = r" Returns a mutable reference to the raw runtime instance used by"]
        #[doc = r" this contract."]
        fn raw_instance_mut(&mut self) -> &mut self::ethcontract::dyns::DynInstance {
            &mut self.methods.instance
        }
    }
    impl std::fmt::Debug for Contract {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(UniswapVault))
                .field(&self.address())
                .finish()
        }
    }
    impl Contract {
        #[doc = "Generated by `ethcontract`"]
        #[allow(clippy::too_many_arguments)]
        pub fn builder<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
        ) -> self::ethcontract::dyns::DynDeployBuilder<Self>
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            use self::ethcontract::contract::DeployBuilder;
            use self::ethcontract::dyns::DynTransport;
            use self::ethcontract::web3::api::Web3;
            let transport = DynTransport::new(web3.transport().clone());
            let web3 = Web3::new(transport);
            let bytecode = Self::raw_contract().bytecode.clone();
            DeployBuilder::new(web3, bytecode, ()).expect("valid deployment args")
        }
    }
    impl self::ethcontract::contract::Deploy<self::ethcontract::dyns::DynTransport> for Contract {
        type Context = self::ethcontract::common::Bytecode;
        fn bytecode(cx: &Self::Context) -> &self::ethcontract::common::Bytecode {
            cx
        }
        fn abi(_: &Self::Context) -> &self::ethcontract::common::Abi {
            &Self::raw_contract().abi
        }
        fn from_deployment(
            web3: self::ethcontract::dyns::DynWeb3,
            address: self::ethcontract::Address,
            transaction_hash: self::ethcontract::H256,
            _: Self::Context,
        ) -> Self {
            Self::with_deployment_info(&web3, address, Some(transaction_hash.into()))
        }
    }
    impl Contract {
        #[doc = r" Returns an object that allows accessing typed method signatures."]
        pub fn signatures() -> Signatures {
            Signatures
        }
        #[doc = r" Retrieves a reference to type containing all the generated"]
        #[doc = r" contract methods. This can be used for methods where the name"]
        #[doc = r" would collide with a common method (like `at` or `deployed`)."]
        pub fn methods(&self) -> &Methods {
            &self.methods
        }
    }
    #[doc = r" Type containing signatures for all methods for generated contract type."]
    #[derive(Clone, Copy)]
    pub struct Signatures;
    impl Signatures {
        #[doc = "Returns signature for method `openPosition(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn open_position(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([206, 233, 68, 99])
        }
        #[doc = "Returns signature for method `getConfig(uint16,uint16,address,uint256):(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_config(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                u16,
                u16,
                self::ethcontract::Address,
                self::ethcontract::U256,
            ),
            self::ethcontract::tokens::Bytes<Vec<u8>>,
        > {
            self::ethcontract::contract::Signature::new([245, 236, 189, 188])
        }
        #[doc = "Returns signature for method `withdrawNativeToken(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn withdraw_native_token(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([249, 93, 204, 10])
        }
        #[doc = "Returns signature for method `_sqrtPriceLimitX96toUni():(uint160)`."]
        #[allow(clippy::type_complexity)]
        pub fn sqrt_price_limit_x9_6to_uni(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([38, 108, 227, 254])
        }
        #[doc = "Returns signature for method `getSendVersion():(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_send_version(&self) -> self::ethcontract::contract::Signature<(), u16> {
            self::ethcontract::contract::Signature::new([84, 165, 190, 218])
        }
        #[doc = "Returns signature for method `getTotalUSDCValue():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_total_usdc_value(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([248, 99, 6, 17])
        }
        #[doc = "Returns signature for method `forceResumeReceive(uint16,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn force_resume_receive(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (u16, self::ethcontract::tokens::Bytes<Vec<u8>>),
            (),
        > {
            self::ethcontract::contract::Signature::new([66, 214, 90, 141])
        }
        #[doc = "Returns signature for method `closePosition(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn close_position(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([171, 50, 244, 82])
        }
        #[doc = "Returns signature for method `nativeRouter():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn native_router(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([154, 229, 138, 2])
        }
        #[doc = "Returns signature for method `setReceiveVersion(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_receive_version(&self) -> self::ethcontract::contract::Signature<(u16,), ()> {
            self::ethcontract::contract::Signature::new([16, 221, 177, 55])
        }
        #[doc = "Returns signature for method `transferOwnership(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn transfer_ownership(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::Address,), ()> {
            self::ethcontract::contract::Signature::new([242, 253, 227, 139])
        }
        #[doc = "Returns signature for method `repay(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn repay(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([181, 97, 253, 43])
        }
        #[doc = "Returns signature for method `paused():(bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn paused(&self) -> self::ethcontract::contract::Signature<(), bool> {
            self::ethcontract::contract::Signature::new([92, 151, 90, 187])
        }
        #[doc = "Returns signature for method `adjustPosition(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn adjust_position(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([107, 3, 101, 195])
        }
        #[doc = "Returns signature for method `setNativeLZEndpoint(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_native_lz_endpoint(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::Address,), ()> {
            self::ethcontract::contract::Signature::new([112, 220, 94, 201])
        }
        #[doc = "Returns signature for method `getReserve():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_reserve(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([89, 191, 93, 57])
        }
        #[doc = "Returns signature for method `bridgeToRouterBack(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn bridge_to_router_back(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([111, 238, 120, 95])
        }
        #[doc = "Returns signature for method `setRemote(uint16,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_remote(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (u16, self::ethcontract::tokens::Bytes<Vec<u8>>),
            (),
        > {
            self::ethcontract::contract::Signature::new([32, 205, 208, 161])
        }
        #[doc = "Returns signature for method `claim(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn claim(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([122, 30, 225, 192])
        }
        #[doc = "Returns signature for method `remotes(uint16):(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn remotes(
            &self,
        ) -> self::ethcontract::contract::Signature<(u16,), self::ethcontract::tokens::Bytes<Vec<u8>>>
        {
            self::ethcontract::contract::Signature::new([157, 31, 97, 19])
        }
        #[doc = "Returns signature for method `_feeToPair():(uint24)`."]
        #[allow(clippy::type_complexity)]
        pub fn fee_to_pair(&self) -> self::ethcontract::contract::Signature<(), u32> {
            self::ethcontract::contract::Signature::new([67, 114, 46, 75])
        }
        #[doc = "Returns signature for method `nativeBridge(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn native_bridge(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([199, 4, 173, 182])
        }
        #[doc = "Returns signature for method `pause()`."]
        #[allow(clippy::type_complexity)]
        pub fn pause(&self) -> self::ethcontract::contract::Signature<(), ()> {
            self::ethcontract::contract::Signature::new([132, 86, 203, 89])
        }
        #[doc = "Returns signature for method `backTokensToNative(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn back_tokens_to_native(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([234, 195, 197, 150])
        }
        #[doc = "Returns signature for method `balanceOf(address):(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn balance_of(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address,),
            self::ethcontract::U256,
        > {
            self::ethcontract::contract::Signature::new([112, 160, 130, 49])
        }
        #[doc = "Returns signature for method `renounceOwnership()`."]
        #[allow(clippy::type_complexity)]
        pub fn renounce_ownership(&self) -> self::ethcontract::contract::Signature<(), ()> {
            self::ethcontract::contract::Signature::new([113, 80, 24, 166])
        }
        #[doc = "Returns signature for method `setOutboundConfirmations(uint16,uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_outbound_confirmations(
            &self,
        ) -> self::ethcontract::contract::Signature<(u16, u16), ()> {
            self::ethcontract::contract::Signature::new([43, 34, 87, 220])
        }
        #[doc = "Returns signature for method `setSendVersion(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_send_version(&self) -> self::ethcontract::contract::Signature<(u16,), ()> {
            self::ethcontract::contract::Signature::new([7, 224, 219, 23])
        }
        #[doc = "Returns signature for method `slippageTolerance():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn slippage_tolerance(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([208, 49, 83, 170])
        }
        #[doc = "Returns signature for method `stringToBytes32(string):(bytes32)`."]
        #[allow(clippy::type_complexity)]
        pub fn string_to_bytes_32(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (String,),
            self::ethcontract::tokens::Bytes<[u8; 32]>,
        > {
            self::ethcontract::contract::Signature::new([207, 181, 25, 40])
        }
        #[doc = "Returns signature for method `setInboundConfirmations(uint16,uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_inbound_confirmations(
            &self,
        ) -> self::ethcontract::contract::Signature<(u16, u16), ()> {
            self::ethcontract::contract::Signature::new([109, 246, 83, 113])
        }
        #[doc = "Returns signature for method `setConfig(uint16,uint16,uint256,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_config(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                u16,
                u16,
                self::ethcontract::U256,
                self::ethcontract::tokens::Bytes<Vec<u8>>,
            ),
            (),
        > {
            self::ethcontract::contract::Signature::new([203, 237, 139, 156])
        }
        #[doc = "Returns signature for method `borrow(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn borrow(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([34, 161, 104, 240])
        }
        #[doc = "Returns signature for method `_wToken():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn w_token(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([8, 129, 146, 26])
        }
        #[doc = "Returns signature for method `getReceiveVersion():(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_receive_version(&self) -> self::ethcontract::contract::Signature<(), u16> {
            self::ethcontract::contract::Signature::new([207, 93, 20, 113])
        }
        #[doc = "Returns signature for method `withdrawUSDC(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn withdraw_usdc(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([55, 70, 62, 29])
        }
        #[doc = "Returns signature for method `owner():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn owner(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([141, 165, 203, 91])
        }
        #[doc = "Returns signature for method `_usdcToken():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn usdc_token(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([137, 35, 213, 162])
        }
        #[doc = "Returns signature for method `approve(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn approve(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([1, 157, 39, 41])
        }
        #[doc = "Returns signature for method `initialize(address,address,address,address,uint24,uint160,uint160)`."]
        #[allow(clippy::type_complexity)]
        pub fn initialize(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                self::ethcontract::Address,
                self::ethcontract::Address,
                self::ethcontract::Address,
                self::ethcontract::Address,
                u32,
                self::ethcontract::U256,
                self::ethcontract::U256,
            ),
            (),
        > {
            self::ethcontract::contract::Signature::new([56, 144, 85, 235])
        }
        #[doc = "Returns signature for method `setBridge(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_bridge(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([108, 182, 254, 127])
        }
        #[doc = "Returns signature for method `submitNativeToken(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn submit_native_token(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([238, 236, 217, 186])
        }
        #[doc = "Returns signature for method `unpause()`."]
        #[allow(clippy::type_complexity)]
        pub fn unpause(&self) -> self::ethcontract::contract::Signature<(), ()> {
            self::ethcontract::contract::Signature::new([63, 75, 168, 58])
        }
        #[doc = "Returns signature for method `_deadlineTime():(uint160)`."]
        #[allow(clippy::type_complexity)]
        pub fn deadline_time(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([90, 245, 64, 136])
        }
        #[doc = "Returns signature for method `setNativeRouter(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_native_router(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::Address,), ()> {
            self::ethcontract::contract::Signature::new([230, 230, 169, 225])
        }
        #[doc = "Returns signature for method `updateSwapInfo(uint24,uint160,uint160)`."]
        #[allow(clippy::type_complexity)]
        pub fn update_swap_info(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (u32, self::ethcontract::U256, self::ethcontract::U256),
            (),
        > {
            self::ethcontract::contract::Signature::new([152, 130, 135, 108])
        }
        #[doc = "Returns signature for method `lzReceive(uint16,bytes,uint64,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn lz_receive(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                u16,
                self::ethcontract::tokens::Bytes<Vec<u8>>,
                u64,
                self::ethcontract::tokens::Bytes<Vec<u8>>,
            ),
            (),
        > {
            self::ethcontract::contract::Signature::new([0, 29, 53, 103])
        }
        #[doc = "Returns signature for method `_deCommasStrategyRouter():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn de_commas_strategy_router(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([189, 138, 83, 107])
        }
        #[doc = "Returns signature for method `deposit(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn deposit(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([152, 177, 224, 106])
        }
    }
    #[doc = r" Type containing all contract methods for generated contract type."]
    #[derive(Clone)]
    pub struct Methods {
        instance: self::ethcontract::dyns::DynInstance,
    }
    #[allow(clippy::too_many_arguments, clippy::type_complexity)]
    impl Methods {
        #[doc = "Generated by `ethcontract`"]
        pub fn open_position(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            position_type: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([206, 233, 68, 99], (base_asset, amount, position_type))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_config(
            &self,
            p0: u16,
            chain_id: u16,
            p2: self::ethcontract::Address,
            config_type: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::tokens::Bytes<Vec<u8>>>
        {
            self.instance
                .view_method([245, 236, 189, 188], (p0, chain_id, p2, config_type))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn withdraw_native_token(
            &self,
            p0: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([249, 93, 204, 10], (p0, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn sqrt_price_limit_x9_6to_uni(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([38, 108, 227, 254], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_send_version(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<u16> {
            self.instance
                .view_method([84, 165, 190, 218], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_total_usdc_value(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([248, 99, 6, 17], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn force_resume_receive(
            &self,
            src_chain_id: u16,
            src_address: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([66, 214, 90, 141], (src_chain_id, src_address))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn close_position(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([171, 50, 244, 82], (base_asset, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn native_router(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([154, 229, 138, 2], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_receive_version(
            &self,
            version: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([16, 221, 177, 55], (version,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn transfer_ownership(
            &self,
            new_owner: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([242, 253, 227, 139], (new_owner,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn repay(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([181, 97, 253, 43], (base_asset, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn paused(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<bool> {
            self.instance
                .view_method([92, 151, 90, 187], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn adjust_position(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([107, 3, 101, 195], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_native_lz_endpoint(
            &self,
            endpoint: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([112, 220, 94, 201], (endpoint,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_reserve(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([89, 191, 93, 57], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn bridge_to_router_back(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([111, 238, 120, 95], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_remote(
            &self,
            chain_id: u16,
            remote_address: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([32, 205, 208, 161], (chain_id, remote_address))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn claim(
            &self,
            p0: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([122, 30, 225, 192], (p0, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn remotes(
            &self,
            p0: u16,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::tokens::Bytes<Vec<u8>>>
        {
            self.instance
                .view_method([157, 31, 97, 19], (p0,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn fee_to_pair(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<u32> {
            self.instance
                .view_method([67, 114, 46, 75], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn native_bridge(
            &self,
            action_data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([199, 4, 173, 182], (action_data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn pause(&self) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([132, 86, 203, 89], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn back_tokens_to_native(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([234, 195, 197, 150], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn balance_of(
            &self,
            token: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([112, 160, 130, 49], (token,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn renounce_ownership(&self) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([113, 80, 24, 166], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_outbound_confirmations(
            &self,
            remote_chain_id: u16,
            confirmations: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([43, 34, 87, 220], (remote_chain_id, confirmations))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_send_version(
            &self,
            version: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([7, 224, 219, 23], (version,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn slippage_tolerance(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([208, 49, 83, 170], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn string_to_bytes_32(
            &self,
            source: String,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::tokens::Bytes<[u8; 32]>>
        {
            self.instance
                .view_method([207, 181, 25, 40], (source,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_inbound_confirmations(
            &self,
            remote_chain_id: u16,
            confirmations: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([109, 246, 83, 113], (remote_chain_id, confirmations))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_config(
            &self,
            p0: u16,
            chain_id: u16,
            config_type: self::ethcontract::U256,
            config: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([203, 237, 139, 156], (p0, chain_id, config_type, config))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn borrow(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([34, 161, 104, 240], (base_asset, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn w_token(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([8, 129, 146, 26], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_receive_version(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<u16> {
            self.instance
                .view_method([207, 93, 20, 113], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn withdraw_usdc(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([55, 70, 62, 29], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn owner(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([141, 165, 203, 91], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn usdc_token(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([137, 35, 213, 162], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn approve(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([1, 157, 39, 41], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn initialize(
            &self,
            de_commas_strategy_router: self::ethcontract::Address,
            uniswap_router_v3: self::ethcontract::Address,
            usdc_token: self::ethcontract::Address,
            w_token: self::ethcontract::Address,
            fee_to_pair: u32,
            deadline_time: self::ethcontract::U256,
            sqrt_price_limit_x9_6to_uni: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method(
                    [56, 144, 85, 235],
                    (
                        de_commas_strategy_router,
                        uniswap_router_v3,
                        usdc_token,
                        w_token,
                        fee_to_pair,
                        deadline_time,
                        sqrt_price_limit_x9_6to_uni,
                    ),
                )
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_bridge(
            &self,
            action_data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([108, 182, 254, 127], (action_data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn submit_native_token(
            &self,
            p0: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([238, 236, 217, 186], (p0, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn unpause(&self) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([63, 75, 168, 58], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn deadline_time(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([90, 245, 64, 136], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_native_router(
            &self,
            new: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([230, 230, 169, 225], (new,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn update_swap_info(
            &self,
            fee_to_pair: u32,
            deadline_time: self::ethcontract::U256,
            sqrt_price_limit_x9_6to_uni: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method(
                    [152, 130, 135, 108],
                    (fee_to_pair, deadline_time, sqrt_price_limit_x9_6to_uni),
                )
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn lz_receive(
            &self,
            src_chain_id: u16,
            src_address: self::ethcontract::tokens::Bytes<Vec<u8>>,
            p2: u64,
            payload: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([0, 29, 53, 103], (src_chain_id, src_address, p2, payload))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn de_commas_strategy_router(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([189, 138, 83, 107], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn deposit(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([152, 177, 224, 106], (data,))
                .expect("generated call")
        }
    }
    impl std::ops::Deref for Contract {
        type Target = Methods;
        fn deref(&self) -> &Self::Target {
            &self.methods
        }
    }
    impl Contract {
        #[doc = r" Returns a method builder to setup a call to a smart"]
        #[doc = r" contract's fallback function."]
        pub fn fallback<D>(&self, data: D) -> self::ethcontract::dyns::DynMethodBuilder<()>
        where
            D: Into<Vec<u8>>,
        {
            self.raw_instance()
                .fallback(data)
                .expect("generated fallback method")
        }
    }
    #[doc = r" Module containing all generated data models for this contract's"]
    #[doc = r" events."]
    pub mod event_data {
        use super::ethcontract;
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Bridged {
            pub amount: self::ethcontract::U256,
            pub token_1: self::ethcontract::Address,
            pub token_2: self::ethcontract::Address,
            pub sender: self::ethcontract::Address,
        }
        impl Bridged {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    157, 103, 93, 235, 222, 10, 106, 110, 215, 212, 114, 251, 134, 139, 107, 222,
                    30, 128, 65, 144, 239, 76, 255, 32, 230, 145, 96, 10, 95, 219, 134, 149,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Bridged(uint256,address,address,address)`"]
            pub fn abi_signature() -> &'static str {
                "Bridged(uint256,address,address,address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Bridged {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (amount, token_1, token_2, sender) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Bridged {
                    amount,
                    token_1,
                    token_2,
                    sender,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Bridged {
            pub receiver_lz_id: u16,
            pub receiver_address: self::ethcontract::Address,
            pub stable_amount: self::ethcontract::U256,
        }
        impl Bridged {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    128, 240, 137, 105, 159, 208, 242, 189, 43, 236, 165, 225, 79, 159, 16, 241,
                    249, 198, 107, 97, 20, 48, 164, 43, 8, 38, 254, 13, 175, 63, 34, 203,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Bridged(uint16,address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "Bridged(uint16,address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Bridged {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (receiver_lz_id, receiver_address, stable_amount) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Bridged {
                    receiver_lz_id,
                    receiver_address,
                    stable_amount,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Unpaused {
            pub account: self::ethcontract::Address,
        }
        impl Unpaused {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    93, 185, 238, 10, 73, 91, 242, 230, 255, 156, 145, 167, 131, 76, 27, 164, 253,
                    210, 68, 165, 232, 170, 78, 83, 123, 211, 138, 234, 228, 176, 115, 170,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Unpaused(address)`"]
            pub fn abi_signature() -> &'static str {
                "Unpaused(address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Unpaused {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (account,) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Unpaused { account })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct PositionAdjusted {
            pub operation_type: bool,
            pub usdc_amount: self::ethcontract::U256,
            pub eth_amount: self::ethcontract::U256,
        }
        impl PositionAdjusted {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    125, 142, 158, 209, 112, 121, 83, 156, 132, 139, 75, 141, 124, 196, 123, 66,
                    54, 38, 170, 171, 114, 173, 78, 53, 194, 241, 216, 188, 145, 224, 216, 12,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`PositionAdjusted(bool,uint256,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "PositionAdjusted(bool,uint256,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for PositionAdjusted {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (operation_type, usdc_amount, eth_amount) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(PositionAdjusted {
                    operation_type,
                    usdc_amount,
                    eth_amount,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct TransferredToNativeRouter {
            pub token: self::ethcontract::Address,
            pub amount: self::ethcontract::U256,
        }
        impl TransferredToNativeRouter {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    203, 107, 134, 119, 160, 197, 69, 188, 127, 227, 60, 16, 49, 161, 8, 137, 74,
                    232, 238, 62, 228, 50, 216, 21, 52, 55, 131, 201, 76, 69, 226, 148,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`TransferredToNativeRouter(address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "TransferredToNativeRouter(address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for TransferredToNativeRouter {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token, amount) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(TransferredToNativeRouter { token, amount })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Initialized {
            pub version: u8,
        }
        impl Initialized {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    127, 38, 184, 63, 249, 110, 31, 43, 106, 104, 47, 19, 56, 82, 246, 121, 138, 9,
                    196, 101, 218, 149, 146, 20, 96, 206, 251, 56, 71, 64, 36, 152,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Initialized(uint8)`"]
            pub fn abi_signature() -> &'static str {
                "Initialized(uint8)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Initialized {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (version,) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Initialized { version })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Paused {
            pub account: self::ethcontract::Address,
        }
        impl Paused {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    98, 231, 140, 234, 1, 190, 227, 32, 205, 78, 66, 2, 112, 181, 234, 116, 0, 13,
                    17, 176, 201, 247, 71, 84, 235, 219, 252, 84, 75, 5, 162, 88,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Paused(address)`"]
            pub fn abi_signature() -> &'static str {
                "Paused(address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Paused {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (account,) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Paused { account })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct OwnershipTransferred {
            pub previous_owner: self::ethcontract::Address,
            pub new_owner: self::ethcontract::Address,
        }
        impl OwnershipTransferred {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    139, 224, 7, 156, 83, 22, 89, 20, 19, 68, 205, 31, 208, 164, 242, 132, 25, 73,
                    127, 151, 34, 163, 218, 175, 227, 180, 24, 111, 107, 100, 87, 224,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`OwnershipTransferred(address,address)`"]
            pub fn abi_signature() -> &'static str {
                "OwnershipTransferred(address,address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for OwnershipTransferred {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (previous_owner, new_owner) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(OwnershipTransferred {
                    previous_owner,
                    new_owner,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct RouterChanged {
            pub sender: self::ethcontract::Address,
            pub old_relayer: self::ethcontract::Address,
            pub new_relayer: self::ethcontract::Address,
        }
        impl RouterChanged {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    50, 204, 97, 24, 137, 57, 207, 201, 112, 168, 44, 37, 189, 108, 36, 91, 195,
                    110, 110, 102, 28, 233, 68, 202, 253, 49, 25, 17, 209, 104, 222, 224,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`RouterChanged(address,address,address)`"]
            pub fn abi_signature() -> &'static str {
                "RouterChanged(address,address,address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for RouterChanged {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (sender, old_relayer, new_relayer) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(RouterChanged {
                    sender,
                    old_relayer,
                    new_relayer,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Usdcwithdrawn {
            pub sender: self::ethcontract::Address,
            pub amount: self::ethcontract::U256,
        }
        impl Usdcwithdrawn {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    42, 167, 251, 151, 96, 14, 167, 2, 180, 84, 53, 159, 195, 208, 42, 233, 250,
                    72, 54, 126, 113, 85, 80, 93, 56, 206, 232, 150, 229, 181, 170, 231,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`USDCWithdrawn(address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "USDCWithdrawn(address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Usdcwithdrawn {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (sender, amount) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Usdcwithdrawn { sender, amount })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Usdcdeposited {
            pub time_stamp: self::ethcontract::Address,
            pub amount: self::ethcontract::U256,
        }
        impl Usdcdeposited {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    128, 236, 197, 50, 207, 46, 8, 133, 102, 1, 223, 66, 100, 105, 112, 214, 118,
                    166, 134, 216, 238, 172, 191, 210, 3, 143, 174, 79, 242, 136, 218, 86,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`USDCDeposited(address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "USDCDeposited(address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Usdcdeposited {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (time_stamp, amount) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Usdcdeposited { time_stamp, amount })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
    }
    impl Contract {
        #[doc = r" Retrieves a handle to a type containing for creating event"]
        #[doc = r" streams for all the contract events."]
        pub fn events(&self) -> Events<'_> {
            Events {
                instance: self.raw_instance(),
            }
        }
    }
    pub struct Events<'a> {
        instance: &'a self::ethcontract::dyns::DynInstance,
    }
    impl Events<'_> {
        #[doc = r" Generated by `ethcontract`."]
        pub fn bridged(&self) -> self::event_builders::BridgedBuilder {
            self::event_builders::BridgedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        157, 103, 93, 235, 222, 10, 106, 110, 215, 212, 114, 251, 134, 139, 107,
                        222, 30, 128, 65, 144, 239, 76, 255, 32, 230, 145, 96, 10, 95, 219, 134,
                        149,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn bridged(&self) -> self::event_builders::BridgedBuilder {
            self::event_builders::BridgedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        128, 240, 137, 105, 159, 208, 242, 189, 43, 236, 165, 225, 79, 159, 16,
                        241, 249, 198, 107, 97, 20, 48, 164, 43, 8, 38, 254, 13, 175, 63, 34, 203,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn unpaused(&self) -> self::event_builders::UnpausedBuilder {
            self::event_builders::UnpausedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        93, 185, 238, 10, 73, 91, 242, 230, 255, 156, 145, 167, 131, 76, 27, 164,
                        253, 210, 68, 165, 232, 170, 78, 83, 123, 211, 138, 234, 228, 176, 115,
                        170,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn position_adjusted(&self) -> self::event_builders::PositionAdjustedBuilder {
            self::event_builders::PositionAdjustedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        125, 142, 158, 209, 112, 121, 83, 156, 132, 139, 75, 141, 124, 196, 123,
                        66, 54, 38, 170, 171, 114, 173, 78, 53, 194, 241, 216, 188, 145, 224, 216,
                        12,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn transferred_to_native_router(
            &self,
        ) -> self::event_builders::TransferredToNativeRouterBuilder {
            self::event_builders::TransferredToNativeRouterBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        203, 107, 134, 119, 160, 197, 69, 188, 127, 227, 60, 16, 49, 161, 8, 137,
                        74, 232, 238, 62, 228, 50, 216, 21, 52, 55, 131, 201, 76, 69, 226, 148,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn initialized(&self) -> self::event_builders::InitializedBuilder {
            self::event_builders::InitializedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        127, 38, 184, 63, 249, 110, 31, 43, 106, 104, 47, 19, 56, 82, 246, 121,
                        138, 9, 196, 101, 218, 149, 146, 20, 96, 206, 251, 56, 71, 64, 36, 152,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn paused(&self) -> self::event_builders::PausedBuilder {
            self::event_builders::PausedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        98, 231, 140, 234, 1, 190, 227, 32, 205, 78, 66, 2, 112, 181, 234, 116, 0,
                        13, 17, 176, 201, 247, 71, 84, 235, 219, 252, 84, 75, 5, 162, 88,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn ownership_transferred(&self) -> self::event_builders::OwnershipTransferredBuilder {
            self::event_builders::OwnershipTransferredBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        139, 224, 7, 156, 83, 22, 89, 20, 19, 68, 205, 31, 208, 164, 242, 132, 25,
                        73, 127, 151, 34, 163, 218, 175, 227, 180, 24, 111, 107, 100, 87, 224,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn router_changed(&self) -> self::event_builders::RouterChangedBuilder {
            self::event_builders::RouterChangedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        50, 204, 97, 24, 137, 57, 207, 201, 112, 168, 44, 37, 189, 108, 36, 91,
                        195, 110, 110, 102, 28, 233, 68, 202, 253, 49, 25, 17, 209, 104, 222, 224,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn usdc_withdrawn(&self) -> self::event_builders::UsdcwithdrawnBuilder {
            self::event_builders::UsdcwithdrawnBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        42, 167, 251, 151, 96, 14, 167, 2, 180, 84, 53, 159, 195, 208, 42, 233,
                        250, 72, 54, 126, 113, 85, 80, 93, 56, 206, 232, 150, 229, 181, 170, 231,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn usdc_deposited(&self) -> self::event_builders::UsdcdepositedBuilder {
            self::event_builders::UsdcdepositedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        128, 236, 197, 50, 207, 46, 8, 133, 102, 1, 223, 66, 100, 105, 112, 214,
                        118, 166, 134, 216, 238, 172, 191, 210, 3, 143, 174, 79, 242, 136, 218, 86,
                    ]))
                    .expect("generated event filter"),
            )
        }
    }
    #[doc = r" Module containing the generated event stream builders with type safe"]
    #[doc = r" filter methods for this contract's events."]
    pub mod event_builders {
        use super::ethcontract;
        use super::event_data;
        #[doc = "A builder for creating a filtered stream of `Bridged` events."]
        pub struct BridgedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Bridged>,
        );
        impl BridgedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Bridged>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Bridged>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Bridged` events."]
        pub struct BridgedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Bridged>,
        );
        impl BridgedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = "Adds a filter for the receiverLZId event parameter."]
            pub fn receiver_lz_id(mut self, topic: self::ethcontract::Topic<u16>) -> Self {
                self.0 = (self.0).topic0(topic);
                self
            }
            #[doc = "Adds a filter for the receiverAddress event parameter."]
            pub fn receiver_address(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic1(topic);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Bridged>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Bridged>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Unpaused` events."]
        pub struct UnpausedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Unpaused>,
        );
        impl UnpausedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Unpaused>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Unpaused>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `PositionAdjusted` events."]
        pub struct PositionAdjustedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::PositionAdjusted>,
        );
        impl PositionAdjustedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::PositionAdjusted>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::PositionAdjusted>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `TransferredToNativeRouter` events."]
        pub struct TransferredToNativeRouterBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<
                self::event_data::TransferredToNativeRouter,
            >,
        );
        impl TransferredToNativeRouterBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<
                    self::ethcontract::Event<self::event_data::TransferredToNativeRouter>,
                >,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::TransferredToNativeRouter>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Initialized` events."]
        pub struct InitializedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Initialized>,
        );
        impl InitializedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Initialized>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Initialized>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Paused` events."]
        pub struct PausedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Paused>,
        );
        impl PausedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Paused>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Paused>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `OwnershipTransferred` events."]
        pub struct OwnershipTransferredBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::OwnershipTransferred>,
        );
        impl OwnershipTransferredBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = "Adds a filter for the previousOwner event parameter."]
            pub fn previous_owner(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic0(topic);
                self
            }
            #[doc = "Adds a filter for the newOwner event parameter."]
            pub fn new_owner(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic1(topic);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::OwnershipTransferred>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::OwnershipTransferred>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `RouterChanged` events."]
        pub struct RouterChangedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::RouterChanged>,
        );
        impl RouterChangedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::RouterChanged>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::RouterChanged>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Usdcwithdrawn` events."]
        pub struct UsdcwithdrawnBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Usdcwithdrawn>,
        );
        impl UsdcwithdrawnBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Usdcwithdrawn>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Usdcwithdrawn>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Usdcdeposited` events."]
        pub struct UsdcdepositedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Usdcdeposited>,
        );
        impl UsdcdepositedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = "Adds a filter for the timeStamp event parameter."]
            pub fn time_stamp(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic0(topic);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Usdcdeposited>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Usdcdeposited>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
    }
    impl Contract {
        #[doc = r" Returns a log stream with all events."]
        pub fn all_events(&self) -> self::ethcontract::dyns::DynAllEventsBuilder<Event> {
            self::ethcontract::dyns::DynAllEventsBuilder::new(
                self.raw_instance().web3(),
                self.address(),
                self.deployment_information(),
            )
        }
    }
    #[doc = r" A contract event."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    pub enum Event {
        Bridged(self::event_data::Bridged),
        Bridged(self::event_data::Bridged),
        Initialized(self::event_data::Initialized),
        OwnershipTransferred(self::event_data::OwnershipTransferred),
        Paused(self::event_data::Paused),
        PositionAdjusted(self::event_data::PositionAdjusted),
        RouterChanged(self::event_data::RouterChanged),
        TransferredToNativeRouter(self::event_data::TransferredToNativeRouter),
        Usdcdeposited(self::event_data::Usdcdeposited),
        Usdcwithdrawn(self::event_data::Usdcwithdrawn),
        Unpaused(self::event_data::Unpaused),
    }
    impl self::ethcontract::contract::ParseLog for Event {
        fn parse_log(
            log: self::ethcontract::RawLog,
        ) -> Result<Self, self::ethcontract::errors::ExecutionError> {
            let standard_event = log . topics . get (0) . copied () . map (| topic | match topic { self :: ethcontract :: H256 ([157 , 103 , 93 , 235 , 222 , 10 , 106 , 110 , 215 , 212 , 114 , 251 , 134 , 139 , 107 , 222 , 30 , 128 , 65 , 144 , 239 , 76 , 255 , 32 , 230 , 145 , 96 , 10 , 95 , 219 , 134 , 149]) => Ok (Event :: Bridged (log . clone () . decode (Contract :: raw_contract () . abi . event ("Bridged") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([128 , 240 , 137 , 105 , 159 , 208 , 242 , 189 , 43 , 236 , 165 , 225 , 79 , 159 , 16 , 241 , 249 , 198 , 107 , 97 , 20 , 48 , 164 , 43 , 8 , 38 , 254 , 13 , 175 , 63 , 34 , 203]) => Ok (Event :: Bridged (log . clone () . decode (Contract :: raw_contract () . abi . event ("Bridged") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([127 , 38 , 184 , 63 , 249 , 110 , 31 , 43 , 106 , 104 , 47 , 19 , 56 , 82 , 246 , 121 , 138 , 9 , 196 , 101 , 218 , 149 , 146 , 20 , 96 , 206 , 251 , 56 , 71 , 64 , 36 , 152]) => Ok (Event :: Initialized (log . clone () . decode (Contract :: raw_contract () . abi . event ("Initialized") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([139 , 224 , 7 , 156 , 83 , 22 , 89 , 20 , 19 , 68 , 205 , 31 , 208 , 164 , 242 , 132 , 25 , 73 , 127 , 151 , 34 , 163 , 218 , 175 , 227 , 180 , 24 , 111 , 107 , 100 , 87 , 224]) => Ok (Event :: OwnershipTransferred (log . clone () . decode (Contract :: raw_contract () . abi . event ("OwnershipTransferred") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([98 , 231 , 140 , 234 , 1 , 190 , 227 , 32 , 205 , 78 , 66 , 2 , 112 , 181 , 234 , 116 , 0 , 13 , 17 , 176 , 201 , 247 , 71 , 84 , 235 , 219 , 252 , 84 , 75 , 5 , 162 , 88]) => Ok (Event :: Paused (log . clone () . decode (Contract :: raw_contract () . abi . event ("Paused") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([125 , 142 , 158 , 209 , 112 , 121 , 83 , 156 , 132 , 139 , 75 , 141 , 124 , 196 , 123 , 66 , 54 , 38 , 170 , 171 , 114 , 173 , 78 , 53 , 194 , 241 , 216 , 188 , 145 , 224 , 216 , 12]) => Ok (Event :: PositionAdjusted (log . clone () . decode (Contract :: raw_contract () . abi . event ("PositionAdjusted") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([50 , 204 , 97 , 24 , 137 , 57 , 207 , 201 , 112 , 168 , 44 , 37 , 189 , 108 , 36 , 91 , 195 , 110 , 110 , 102 , 28 , 233 , 68 , 202 , 253 , 49 , 25 , 17 , 209 , 104 , 222 , 224]) => Ok (Event :: RouterChanged (log . clone () . decode (Contract :: raw_contract () . abi . event ("RouterChanged") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([203 , 107 , 134 , 119 , 160 , 197 , 69 , 188 , 127 , 227 , 60 , 16 , 49 , 161 , 8 , 137 , 74 , 232 , 238 , 62 , 228 , 50 , 216 , 21 , 52 , 55 , 131 , 201 , 76 , 69 , 226 , 148]) => Ok (Event :: TransferredToNativeRouter (log . clone () . decode (Contract :: raw_contract () . abi . event ("TransferredToNativeRouter") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([128 , 236 , 197 , 50 , 207 , 46 , 8 , 133 , 102 , 1 , 223 , 66 , 100 , 105 , 112 , 214 , 118 , 166 , 134 , 216 , 238 , 172 , 191 , 210 , 3 , 143 , 174 , 79 , 242 , 136 , 218 , 86]) => Ok (Event :: Usdcdeposited (log . clone () . decode (Contract :: raw_contract () . abi . event ("USDCDeposited") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([42 , 167 , 251 , 151 , 96 , 14 , 167 , 2 , 180 , 84 , 53 , 159 , 195 , 208 , 42 , 233 , 250 , 72 , 54 , 126 , 113 , 85 , 80 , 93 , 56 , 206 , 232 , 150 , 229 , 181 , 170 , 231]) => Ok (Event :: Usdcwithdrawn (log . clone () . decode (Contract :: raw_contract () . abi . event ("USDCWithdrawn") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([93 , 185 , 238 , 10 , 73 , 91 , 242 , 230 , 255 , 156 , 145 , 167 , 131 , 76 , 27 , 164 , 253 , 210 , 68 , 165 , 232 , 170 , 78 , 83 , 123 , 211 , 138 , 234 , 228 , 176 , 115 , 170]) => Ok (Event :: Unpaused (log . clone () . decode (Contract :: raw_contract () . abi . event ("Unpaused") . expect ("generated event decode")) ?)) , _ => Err (self :: ethcontract :: errors :: ExecutionError :: from (self :: ethcontract :: common :: abi :: Error :: InvalidData)) , }) ;
            if let Some(Ok(data)) = standard_event {
                return Ok(data);
            }
            Err(self::ethcontract::errors::ExecutionError::from(
                self::ethcontract::common::abi::Error::InvalidData,
            ))
        }
    }
}
use self::uniswap_vault::Contract as UniswapVault;
