#[allow(dead_code)]
mod dc_perpetual_vault {
    # [rustfmt :: skip] use ethcontract as ethcontract ;
    #[doc = "Generated by `ethcontract`"]
    #[derive(Clone)]
    pub struct Contract {
        methods: Methods,
    }
    impl Contract {
        #[doc = r" Retrieves the raw contract instance used to generate the type safe"]
        #[doc = r" API for this contract."]
        pub fn raw_contract() -> &'static self::ethcontract::Contract {
            use self::ethcontract::common::artifact::truffle::TruffleLoader;
            use self::ethcontract::private::lazy_static;
            use self::ethcontract::Contract;
            lazy_static! {
                pub static ref CONTRACT: Contract = {
                    # [allow (unused_mut)] let mut contract = TruffleLoader :: new () . load_contract_from_str ("{\"contractName\":\"DcPerpetualVault\",\"abi\":[{\"type\":\"function\",\"name\":\"setNativeRouter\",\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_perpVault\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_usdcToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_dcRouter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"closePosition\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"remotes\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setReceiveVersion\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stringToBytes32\",\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"constant\":false,\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"withdrawNativeToken\",\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"getSendVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"borrow\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getFreeCollateral\",\"inputs\":[{\"name\":\"_trader\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setConfig\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"_chainId\",\"type\":\"uint16\"},{\"name\":\"_configType\",\"type\":\"uint256\"},{\"name\":\"_config\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setInboundConfirmations\",\"inputs\":[{\"name\":\"remoteChainId\",\"type\":\"uint16\"},{\"name\":\"confirmations\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"repay\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"dcRouter_\",\"type\":\"address\"},{\"name\":\"clearingHouse_\",\"type\":\"address\"},{\"name\":\"perpVault_\",\"type\":\"address\"},{\"name\":\"usdcToken_\",\"type\":\"address\"},{\"name\":\"vToken_\",\"type\":\"address\"},{\"name\":\"wToken_\",\"type\":\"address\"},{\"name\":\"feeToPair_\",\"type\":\"uint24\"},{\"name\":\"deadlineTime_\",\"type\":\"uint160\"},{\"name\":\"sqrtPriceLimitX96toUni_\",\"type\":\"uint160\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSendVersion\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"directDepositToVault\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slippageTolerance\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getDailyMarketTwap\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setPoolLimit\",\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"forceResumeReceive\",\"inputs\":[{\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"totalAbsPositionValue\",\"inputs\":[],\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getConfig\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"_chainId\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_configType\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nativeStrategyTokenPrice\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"emergencyClose\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_clearingHouse\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nativeBridge\",\"inputs\":[{\"name\":\"actionData\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"lzReceive\",\"inputs\":[{\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"payload\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getReceiveVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentFundingRate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdrawOnAddress\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPerpRefCode\",\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getReserve\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"backTokensToNative\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"poolLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"openPosition\",\"inputs\":[{\"name\":\"baseAsset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"positionType\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stringToBytes\",\"inputs\":[],\"outputs\":[],\"constant\":false,\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"maxUsersPoolSizeLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"currentUsersDeposits\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accountValue\",\"inputs\":[{\"name\":\"_trader\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"perpReferralCode\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setRemote\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint16\"},{\"name\":\"remoteAddress\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"adjustPosition\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"currentCasualDeposits\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalUSDCValue\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setBridge\",\"inputs\":[{\"name\":\"actionData\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_deadlineTime\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_SHORT_VALUE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nativeRouter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_sqrtPriceLimitX96toUni\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"submitNativeToken\",\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"setOutboundConfirmations\",\"inputs\":[{\"name\":\"remoteChainId\",\"type\":\"uint16\"},{\"name\":\"confirmations\",\"type\":\"uint16\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setNativeLZEndpoint\",\"inputs\":[{\"name\":\"_endpoint\",\"type\":\"address\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_wToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_vToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Bridged\",\"inputs\":[{\"name\":\"receiverLZId\",\"type\":\"uint16\",\"indexed\":true},{\"name\":\"receiverAddress\",\"type\":\"address\",\"indexed\":true},{\"name\":\"stableAmount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"USDCDeposited\",\"inputs\":[{\"name\":\"timeStamp\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PositionAdjusted\",\"inputs\":[{\"name\":\"operationType\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"positionType\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"USDCWithdrawn\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RouterChanged\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false},{\"name\":\"oldRelayer\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newRelayer\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TransferredToNativeRouter\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"receive\"},{\"type\":\"fallback\"}],\"bytecode\":\"608060405234801561001057600080fd5b50614947806100206000396000f3fe6080604052600436106103c65760003560e01c80638456cb59116101f2578063cbed8b9c11610119578063e27dd7b6116100b2578063eeecd9ba11610084578063f5ecbdbc1161006c578063f5ecbdbc14610b89578063f863061114610ba9578063f95dcc0a14610b5b57005b8063eeecd9ba14610b5b578063f2fde38b14610b6957005b8063e27dd7b614610ace578063e6b9b67714610afb578063e6e6a9e114610b1b578063eac3c59614610b3b57005b8063cfb51928116100eb578063cfb5192814610a54578063d03153aa14610a74578063d59baa0314610a8f578063d89ecd7214610aa457005b8063cbed8b9c146109ff578063cc4c5efb14610a1f578063cee9446314610528578063cf5d147114610a3f57005b8063a9cc9ae91161018b578063b6d6ae101161015d578063b6d6ae1014610989578063bfbd55d3146109a9578063c3999444146109bf578063c704adb6146109df57005b8063a9cc9ae91461095f578063ab32f45214610528578063b15614c614610974578063b561fd2b1461052857005b806398b1e06a116101c457806398b1e06a146108d05780639a34d972146108f05780639ae58a02146109055780639d1f61131461093257005b80638456cb591461084e5780638923d5a2146108635780638b2cfa0b146108905780638da5cb5b146108a557005b806342d65a8d116102ee5780635c975abb116102875780636df653711161025957806370dc5ec91161024157806370dc5ec9146107d7578063715018a6146108395780637a1ee1c01461052857005b80636df653711461079757806370a08231146107b757005b80635c975abb1461071357806369010e3b146107375780636b0365c3146107575780636cb6fe7f1461077757005b806354a5beda116102c057806354a5beda1461069357806359bf5d39146106bb5780635af54088146106d05780635c59e01c146106fd57005b806342d65a8d1461061b5780634469fc9d1461063b578063515f732f1461065057806354485e8f1461066657005b806320cdd0a1116103605780632b2257dc116103325780632b2257dc146105a257806335341d88146105c25780633f4ba83a146105e65780634067fbb4146105fb57005b806320cdd0a11461050857806322a168f014610528578063266ce3fe146105485780632a9c119b1461057557005b80630b3d08ad116103995780630b3d08ad1461048657806310ddb137146104b35780631277b7c3146104d357806317c3a3ac146104f357005b80621d3567146103cf578063019d2729146103ef57806307e0db171461040f5780630881921a1461042f57005b366103cd57005b005b3480156103db57600080fd5b506103cd6103ea366004613f1b565b610bbe565b3480156103fb57600080fd5b506103cd61040a366004613fab565b610ce5565b34801561041b57600080fd5b506103cd61042a366004613fe8565b610da7565b34801561043b57600080fd5b5060a05461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561049257600080fd5b50609c5461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104bf57600080fd5b506103cd6104ce366004613fe8565b610e2b565b3480156104df57600080fd5b506103cd6104ee366004613fab565b610e85565b3480156104ff57600080fd5b506103cd610ebb565b34801561051457600080fd5b506103cd610523366004614005565b610f1d565b34801561053457600080fd5b506103cd610543366004614085565b610f46565b34801561055457600080fd5b5060a25461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561058157600080fd5b50609e5461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156105ae57600080fd5b506103cd6105bd3660046140c7565b610fa8565b3480156105ce57600080fd5b506105d860a35481565b60405190815260200161047d565b3480156105f257600080fd5b506103cd6110bb565b34801561060757600080fd5b506103cd610616366004614100565b6110cd565b34801561062757600080fd5b506103cd610636366004614192565b6110dc565b34801561064757600080fd5b506105d861116d565b34801561065c57600080fd5b506105d860a55481565b34801561067257600080fd5b5060a15461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561069f57600080fd5b506106a86111a5565b60405161ffff909116815260200161047d565b3480156106c757600080fd5b506105d8611239565b3480156106dc57600080fd5b5060a45461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561070957600080fd5b506105d860a75481565b34801561071f57600080fd5b5060655460ff165b604051901515815260200161047d565b34801561074357600080fd5b506103cd6107523660046141e7565b6112cd565b34801561076357600080fd5b506103cd610772366004613fab565b611339565b34801561078357600080fd5b506103cd610792366004613fab565b6113f9565b3480156107a357600080fd5b506103cd6107b23660046140c7565b61145e565b3480156107c357600080fd5b506105d86107d2366004614200565b611519565b3480156107e357600080fd5b506103cd6107f2366004614200565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b34801561084557600080fd5b506103cd6115b1565b34801561085a57600080fd5b506103cd6115c3565b34801561086f57600080fd5b50609f5461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561089c57600080fd5b506105d86115d3565b3480156108b157600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff1661045c565b3480156108dc57600080fd5b506103cd6108eb366004613fab565b6116bb565b3480156108fc57600080fd5b506105d8611984565b34801561091157600080fd5b50609b5461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561093e57600080fd5b5061095261094d366004613fe8565b611bda565b60405161047d9190614297565b34801561096b57600080fd5b50610727611c74565b34801561098057600080fd5b506105d8611d65565b34801561099557600080fd5b506107276109a4366004613fab565b611f3c565b3480156109b557600080fd5b506105d860a65481565b3480156109cb57600080fd5b506105d86109da366004614200565b612399565b3480156109eb57600080fd5b506103cd6109fa366004613fab565b6123f2565b348015610a0b57600080fd5b506103cd610a1a3660046142aa565b612495565b348015610a2b57600080fd5b506105d8610a3a366004614200565b61258c565b348015610a4b57600080fd5b506106a86125e5565b348015610a6057600080fd5b506105d8610a6f366004614100565b61263c565b348015610a8057600080fd5b506105d866b1a2bc2ec5000081565b348015610a9b57600080fd5b5060a6546105d8565b348015610ab057600080fd5b50610ab9602d81565b60405163ffffffff909116815260200161047d565b348015610ada57600080fd5b50609d5461045c9073ffffffffffffffffffffffffffffffffffffffff1681565b348015610b0757600080fd5b506103cd610b1636600461431d565b612656565b348015610b2757600080fd5b506103cd610b36366004614200565b61293d565b348015610b4757600080fd5b506103cd610b56366004613fab565b6129e9565b6103cd610543366004614085565b348015610b7557600080fd5b506103cd610b84366004614200565b612af7565b348015610b9557600080fd5b50610952610ba43660046143e1565b612bab565b348015610bb557600080fd5b506105d8612d01565b60008082806020019051810190610bd59190614477565b915091508161ffff1660011415610bf457610bef81612e78565b610cdd565b8161ffff1660021415610c76576000803073ffffffffffffffffffffffffffffffffffffffff1683604051610c2991906144be565b6000604051808303816000865af19150503d8060008114610c66576040519150601f19603f3d011682016040523d82523d6000602084013e610c6b565b606091505b50610cdd9350505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f556e737570706f7274656420666c61672074797065000000000000000000000060448201526064015b60405180910390fd5b505050505050565b600080600083806020019051810190610cfe91906144da565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526024820183905293965091945092509084169063095ea7b3906044016020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da0919061451d565b5050505050565b6097546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff8316600482015273ffffffffffffffffffffffffffffffffffffffff909116906307e0db17906024015b600060405180830381600087803b158015610e1757600080fd5b505af1158015610da0573d6000803e3d6000fd5b6097546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff8316600482015273ffffffffffffffffffffffffffffffffffffffff909116906310ddb13790602401610dfd565b610e8d613050565b610e96816116bb565b600081806020019051810190610eac919061453a565b9050610eb7816130bd565b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f30783000000000000000000000000000000000000000000000000000000000006044820152606401610cd4565b61ffff821660009081526098602090815260409091208251610f4192840190613d59565b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f446350564c543a20556e737570706f72746564206f7065726174696f6e2e00006044820152606401610cd4565b610fb0613225565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063cbed8b9c90829063096568f690602401602060405180830381865afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190614553565b6040805161ffff861660208201528691600591015b6040516020818303038152906040526040518563ffffffff1660e01b815260040161108d9493929190614570565b600060405180830381600087803b1580156110a757600080fd5b505af1158015610cdd573d6000803e3d6000fd5b6110c3613225565b6110cb6132a6565b565b6110d68161263c565b60a75550565b6097546040517f42d65a8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906342d65a8d90611136908690869086906004016145f0565b600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b50505050505050565b600064e8d4a51000611196611180611984565b670de0b6b3a7640000611191611d65565b613323565b6111a0919061463d565b905090565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff169063096568f6906024015b602060405180830381865afa158015611215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190614553565b609f546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a08231906024015b602060405180830381865afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a0919061453a565b80611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f446350564c543a207a65726f20616d6f756e74000000000000000000000000006044820152606401610cd4565b60a655565b611341613050565b600081806020019051810190611357919061453a565b9050600080821361136957600061136c565b60015b90506000611379836134bd565b9050811561139a5761138a816130bd565b61139481836134d9565b506113b0565b6113a481836134d9565b506113ae81613638565b505b604080516001815283151560208201529081018290527f5cc369355b0b5ff65d9f4f5dc06a416593e6d12f763535de48d69a2bf4998ac19060600160405180910390a150505050565b60008180602001905181019061140f9190614678565b6099805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff9092169190911790555050565b611466613225565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063cbed8b9c90829063096568f690602401602060405180830381865afa1580156114dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115009190614553565b6040805161ffff8616602082015286916002910161105f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a08231906024015b602060405180830381865afa158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab919061453a565b92915050565b6115b9613225565b6110cb6000613804565b6115cb613225565b6110cb61387b565b609e54604080517f6896fabf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691636896fabf9160048083019260209291908290030181865afa158015611643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116679190614678565b6040517f6ccdc82e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9190911690636ccdc82e9060240161128c565b6116c3613050565b600080828060200190518101906116da9190614695565b915091508060001415611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f446350564c543a207a65726f20616d6f756e74000000000000000000000000006044820152606401610cd4565b60a6548160a55461175a91906146c3565b11156117c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f446350564c543a20457863656564696e6720706f6f6c4c696d697400000000006044820152606401610cd4565b8060a560008282546117d491906146c3565b9091555050609f5473ffffffffffffffffffffffffffffffffffffffff166323b872dd336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064016020604051808303816000875af1158015611870573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611894919061451d565b6118fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f446350564c543a2075736463207472616e73666572206661696c6564000000006044820152606401610cd4565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260a860205260408120805483929061192f9084906146c3565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316907f80ecc532cf2e08856601df42646970d676a686d8eeacbfd2038fae4ff288da569060200160405180910390a2505050565b600080609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa2a82946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a189190614678565b73ffffffffffffffffffffffffffffffffffffffff16633e742e3b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8691906146db565b90506000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f807cd226040518163ffffffff1660e01b8152600401602060405180830381865afa158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b9190614678565b60a1546040517f99e4a77100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015263ffffffff851660248201529116906399e4a77190604401602060405180830381865afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba9190614678565b90506000611bc7826138d6565b9050611bd281613906565b935050505090565b60986020526000908152604090208054611bf390614701565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1f90614701565b8015611c6c5780601f10611c4157610100808354040283529160200191611c6c565b820191906000526020600020905b815481529060010190602001808311611c4f57829003601f168201915b505050505081565b6000611c806000613928565b50609e546040517fc399944400000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff169063c399944490602401602060405180830381865afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d14919061453a565b9050611d1f81613638565b5060408051600080825260208201529081018290527f5cc369355b0b5ff65d9f4f5dc06a416593e6d12f763535de48d69a2bf4998ac19060600160405180910390a15090565b600080609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa2a82946040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190614678565b905064e8d4a5100060a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663120806478373ffffffffffffffffffffffffffffffffffffffff16633e742e3b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eae91906146db565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff919091166004820152602401602060405180830381865afa158015611f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2c919061453a565b611f36919061463d565b91505090565b60008060008084806020019051810190611f56919061474f565b9194509250905073ffffffffffffffffffffffffffffffffffffffff831615801590611f97575073ffffffffffffffffffffffffffffffffffffffff811615155b611ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f446350564c543a20496e76616c696420776974686472617720616464726573736044820152606401610cd4565b609e546040517fc399944400000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063c399944490602401602060405180830381865afa15801561206b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f919061453a565b82111561211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f446350564c543a20616d6f756e742065786365656473207661756c7420636f6c60448201527f6c61746572616c000000000000000000000000000000000000000000000000006064820152608401610cd4565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260a860205260409020548211156121d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f446350564c543a20576974686472617720616d6f756e7420657863656564732060448201527f726563697069656e742773206465706f736974730000000000000000000000006064820152608401610cd4565b60006121de83613638565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018390529192509085169063a9059cbb906044016020604051808303816000875af1158015612257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227b919061451d565b612307576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f446350564c543a2077697468647261774f6e41646472657373207472616e736660448201527f6572206661696c656400000000000000000000000000000000000000000000006064820152608401610cd4565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260a860205260408120805485929061233c908490614787565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590527f2aa7fb97600ea702b454359fc3d02ae9fa48367e7155505d38cee896e5b5aae7910160405180910390a150505050919050565b609e546040517fc399944400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600092169063c39994449060240161156a565b609a5473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4242423a73656e6465722069736e277420616374696f6e506f6f6c00000000006044820152606401610cd4565b61249281612e78565b50565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063cbed8b9c90829063096568f690602401602060405180830381865afa15801561250b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252f9190614553565b868686866040518663ffffffff1660e01b815260040161255395949392919061479e565b600060405180830381600087803b15801561256d57600080fd5b505af1158015612581573d6000803e3d6000fd5b505050505050505050565b609d546040517f5ae8095100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000921690635ae809519060240161156a565b6097546040517fda1a7c9a00000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff169063da1a7c9a906024016111f8565b805160009082906126505750600092915050565b50919050565b600054610100900460ff16158080156126765750600054600160ff909116105b806126905750303b158015612690575060005460ff166001145b61271c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610cd4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561277a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b612782613a4e565b61278a613aed565b609c805473ffffffffffffffffffffffffffffffffffffffff8082167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255609d805482168c8416179055609e805482168b8416908117909155609f805483168b851690811790915560a1805484168b861617905560a0805484168a861617905560a48054841688861617905560a28054909316938616939093179091556040517f095ea7b300000000000000000000000000000000000000000000000000000000815260048101919091527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015263095ea7b3906044016020604051808303816000875af11580156128a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cd919061451d565b50801561293157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b609b805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831617909255167f32cc61188939cfc970a82c25bd6c245bc36e6e661ce944cafd311911d168dee06129a93390565b609b546040805173ffffffffffffffffffffffffffffffffffffffff93841681528386166020820152929091169082015260600160405180910390a15050565b60008082806020019051810190612a009190614695565b609b546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810183905292945090925083169063a9059cbb906044016020604051808303816000875af1158015612a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa2919061451d565b506040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fcb6b8677a0c545bc7fe33c1031a108894ae8ee3ee432d815343783c94c45e294910160405180910390a1505050565b612aff613225565b73ffffffffffffffffffffffffffffffffffffffff8116612ba2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610cd4565b61249281613804565b6097546040517f096568f600000000000000000000000000000000000000000000000000000000815230600482015260609173ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90829063096568f690602401602060405180830381865afa158015612c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c469190614553565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9182166004820152908716602482015230604482015260648101859052608401600060405180830381865afa158015612cb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612cf891908101906147d7565b95945050505050565b60a0546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091612db09173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9a919061453a565b612da2611d65565b670de0b6b3a7640000613323565b612db8611239565b609d546040517f5ae8095100000000000000000000000000000000000000000000000000000000815230600482015264e8d4a5100091612e5a9173ffffffffffffffffffffffffffffffffffffffff90911690635ae8095190602401602060405180830381865afa158015612e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e55919061453a565b6134bd565b612e64919061463d565b612e6e91906146c3565b6111a091906146c3565b600080600080600085806020019051810190612e94919061480c565b6099546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff620100009092048216600482015260248101869052959a509398509196509450925086169063095ea7b3906044016020604051808303816000875af1158015612f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f43919061451d565b506099546040517f0a78909d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301526024820187905261ffff86166044830152848116606483015283811660848301526201000090920490911690630a78909d90479060a4016000604051808303818588803b158015612fda57600080fd5b505af1158015612fee573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff168361ffff167f80f089699fd0f2bd2beca5e14f9f10f1f9c66b611430a42b0826fe0daf3f22cb8660405161304091815260200190565b60405180910390a3505050505050565b60655460ff16156110cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610cd4565b80613124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f446350564c543a207a65726f20616d6f756e74000000000000000000000000006044820152606401610cd4565b609f54609e546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af115801561319f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c3919061451d565b50609e54609f546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018490529116906347e7ef2490604401610dfd565b60335473ffffffffffffffffffffffffffffffffffffffff1633146110cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cd4565b6132ae613b8c565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561337b576000841161337057600080fd5b5082900490506134b6565b80841161338757600080fd5b60008486880980840393811190920391905060006133a7861960016146c3565b86169586900495938490049360008190030460010190506133c88184614877565b9093179260006133d9876003614877565b60021890506133e88188614877565b6133f3906002614787565b6133fd9082614877565b90506134098188614877565b613414906002614787565b61341e9082614877565b905061342a8188614877565b613435906002614787565b61343f9082614877565b905061344b8188614877565b613456906002614787565b6134609082614877565b905061346c8188614877565b613477906002614787565b6134819082614877565b905061348d8188614877565b613498906002614787565b6134a29082614877565b90506134ae8186614877565b955050505050505b9392505050565b6000808212156134d5576134d0826148b4565b6115ab565b5090565b604080516101008101825260a15473ffffffffffffffffffffffffffffffffffffffff908116825283151560208301526000928201839052606082018590526080820183905260a45483929160a08301916135359116426146c3565b81526000602080830182905260a754604093840152609d5483517fb6b1b6c3000000000000000000000000000000000000000000000000000000008152855173ffffffffffffffffffffffffffffffffffffffff908116600483015292860151151560248201529385015115156044850152606085015160648501526080850151608485015260a085015160a485015260c0850151821660c485015260e085015160e48501529394509092169063b6b1b6c3906101040160408051808303816000875af115801561360a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362e91906148ed565b5095945050505050565b609e546040517fc3999444000000000000000000000000000000000000000000000000000000008152306004820152600091829173ffffffffffffffffffffffffffffffffffffffff9091169063c399944490602401602060405180830381865afa1580156136ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cf919061453a565b90508083111561376f57609e54609f546040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063f3fef3a390604401600060405180830381600087803b15801561374f57600080fd5b505af1158015613763573d6000803e3d6000fd5b50505050809150612650565b609e54609f546040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810186905291169063f3fef3a390604401600060405180830381600087803b1580156137e557600080fd5b505af11580156137f9573d6000803e3d6000fd5b509495945050505050565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b613883613050565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586132f93390565b60006115ab73ffffffffffffffffffffffffffffffffffffffff8316806c01000000000000000000000000613323565b60006115ab82670de0b6b3a76400006c01000000000000000000000000613323565b609d546040805160a08101825260a15473ffffffffffffffffffffffffffffffffffffffff908116825260006020830181905292820185905260a454929381169262aa9a899291606083019161397f9116426146c3565b815260a754602091820152604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152835173ffffffffffffffffffffffffffffffffffffffff9081166004830152928401519092166024830152820151604482015260608201516064820152608090910151608482015260a40160408051808303816000875af1158015613a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4491906148ed565b5060019392505050565b600054610100900460ff16613ae5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610cd4565b6110cb613bf8565b600054610100900460ff16613b84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610cd4565b6110cb613c98565b60655460ff166110cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610cd4565b600054610100900460ff16613c8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610cd4565b6110cb33613804565b600054610100900460ff16613d2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610cd4565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b828054613d6590614701565b90600052602060002090601f016020900481019282613d875760008555613dcd565b82601f10613da057805160ff1916838001178555613dcd565b82800160010185558215613dcd579182015b82811115613dcd578251825591602001919060010190613db2565b506134d59291505b808211156134d55760008155600101613dd5565b61ffff8116811461249257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613e6f57613e6f613df9565b604052919050565b600067ffffffffffffffff821115613e9157613e91613df9565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000613ed0613ecb84613e77565b613e28565b9050828152838383011115613ee457600080fd5b828260208301376000602084830101529392505050565b600082601f830112613f0c57600080fd5b6134b683833560208501613ebd565b60008060008060808587031215613f3157600080fd5b8435613f3c81613de9565b9350602085013567ffffffffffffffff80821115613f5957600080fd5b613f6588838901613efb565b9450604087013591508082168214613f7c57600080fd5b90925060608601359080821115613f9257600080fd5b50613f9f87828801613efb565b91505092959194509250565b600060208284031215613fbd57600080fd5b813567ffffffffffffffff811115613fd457600080fd5b613fe084828501613efb565b949350505050565b600060208284031215613ffa57600080fd5b81356134b681613de9565b6000806040838503121561401857600080fd5b823561402381613de9565b9150602083013567ffffffffffffffff81111561403f57600080fd5b61404b85828601613efb565b9150509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461249257600080fd5b801515811461249257600080fd5b60008060006060848603121561409a57600080fd5b83356140a581614055565b92506020840135915060408401356140bc81614077565b809150509250925092565b600080604083850312156140da57600080fd5b82356140e581613de9565b915060208301356140f581613de9565b809150509250929050565b60006020828403121561411257600080fd5b813567ffffffffffffffff81111561412957600080fd5b8201601f8101841361413a57600080fd5b613fe084823560208401613ebd565b60008083601f84011261415b57600080fd5b50813567ffffffffffffffff81111561417357600080fd5b60208301915083602082850101111561418b57600080fd5b9250929050565b6000806000604084860312156141a757600080fd5b83356141b281613de9565b9250602084013567ffffffffffffffff8111156141ce57600080fd5b6141da86828701614149565b9497909650939450505050565b6000602082840312156141f957600080fd5b5035919050565b60006020828403121561421257600080fd5b81356134b681614055565b60005b83811015614238578181015183820152602001614220565b83811115614247576000848401525b50505050565b6000815180845261426581602086016020860161421d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006134b6602083018461424d565b6000806000806000608086880312156142c257600080fd5b85356142cd81613de9565b945060208601356142dd81613de9565b935060408601359250606086013567ffffffffffffffff81111561430057600080fd5b61430c88828901614149565b969995985093965092949392505050565b60008060008060008060008060006101208a8c03121561433c57600080fd5b893561434781614055565b985060208a013561435781614055565b975060408a013561436781614055565b965060608a013561437781614055565b955060808a013561438781614055565b945060a08a013561439781614055565b935060c08a013562ffffff811681146143af57600080fd5b925060e08a01356143bf81614055565b91506101008a01356143d081614055565b809150509295985092959850929598565b600080600080608085870312156143f757600080fd5b843561440281613de9565b9350602085013561441281613de9565b9250604085013561442281614055565b9396929550929360600135925050565b600082601f83011261444357600080fd5b8151614451613ecb82613e77565b81815284602083860101111561446657600080fd5b613fe082602083016020870161421d565b6000806040838503121561448a57600080fd5b825161449581613de9565b602084015190925067ffffffffffffffff8111156144b257600080fd5b61404b85828601614432565b600082516144d081846020870161421d565b9190910192915050565b6000806000606084860312156144ef57600080fd5b83516144fa81614055565b602085015190935061450b81614055565b80925050604084015190509250925092565b60006020828403121561452f57600080fd5b81516134b681614077565b60006020828403121561454c57600080fd5b5051919050565b60006020828403121561456557600080fd5b81516134b681613de9565b600061ffff80871683528086166020840152508360408301526080606083015261459d608083018461424d565b9695505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff84168152604060208201526000612cf86040830184866145a7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082614673577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561468a57600080fd5b81516134b681614055565b600080604083850312156146a857600080fd5b82516146b381614055565b6020939093015192949293505050565b600082198211156146d6576146d661460e565b500190565b6000602082840312156146ed57600080fd5b815163ffffffff811681146134b657600080fd5b600181811c9082168061471557607f821691505b60208210811415612650577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60008060006060848603121561476457600080fd5b835161476f81614055565b6020850151604086015191945092506140bc81614055565b6000828210156147995761479961460e565b500390565b600061ffff8088168352808716602084015250846040830152608060608301526147cc6080830184866145a7565b979650505050505050565b6000602082840312156147e957600080fd5b815167ffffffffffffffff81111561480057600080fd5b613fe084828501614432565b600080600080600060a0868803121561482457600080fd5b855161482f81614055565b60208701516040880151919650945061484781613de9565b606087015190935061485881614055565b608087015190925061486981614055565b809150509295509295909350565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148af576148af61460e565b500290565b60007f80000000000000000000000000000000000000000000000000000000000000008214156148e6576148e661460e565b5060000390565b6000806040838503121561490057600080fd5b50508051602090910151909290915056fea2646970667358221220f593d58c66e2bd0bed6fb7eefcff76d1a825c51e7517289fc9f84dcb0b7a7d8b64736f6c634300080c0033\",\"networks\":{},\"devdoc\":{\"details\":null,\"methods\":{}},\"userdoc\":{\"details\":null,\"methods\":{}}}") . expect ("valid contract JSON") ;
                    contract
                };
            }
            &CONTRACT
        }
        #[doc = r" Creates a new contract instance with the specified `web3`"]
        #[doc = r" provider at the given `Address`."]
        #[doc = r""]
        #[doc = r" Note that this does not verify that a contract with a matching"]
        #[doc = r" `Abi` is actually deployed at the given address."]
        pub fn at<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
            address: self::ethcontract::Address,
        ) -> Self
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            Contract::with_deployment_info(web3, address, None)
        }
        #[doc = r" Creates a new contract instance with the specified `web3` provider with"]
        #[doc = r" the given `Abi` at the given `Address` and an optional transaction hash."]
        #[doc = r" This hash is used to retrieve contract related information such as the"]
        #[doc = r" creation block (which is useful for fetching all historic events)."]
        #[doc = r""]
        #[doc = r" Note that this does not verify that a contract with a matching `Abi` is"]
        #[doc = r" actually deployed at the given address nor that the transaction hash,"]
        #[doc = r" when provided, is actually for this contract deployment."]
        pub fn with_deployment_info<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
            address: self::ethcontract::Address,
            deployment_information: Option<ethcontract::common::DeploymentInformation>,
        ) -> Self
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            use self::ethcontract::transport::DynTransport;
            use self::ethcontract::web3::api::Web3;
            use self::ethcontract::Instance;
            let transport = DynTransport::new(web3.transport().clone());
            let web3 = Web3::new(transport);
            let abi = Self::raw_contract().abi.clone();
            let instance =
                Instance::with_deployment_info(web3, abi, address, deployment_information);
            Contract::from_raw(instance)
        }
        #[doc = r" Creates a contract from a raw instance."]
        fn from_raw(instance: self::ethcontract::dyns::DynInstance) -> Self {
            let methods = Methods { instance };
            Contract { methods }
        }
        #[doc = r" Returns the contract address being used by this instance."]
        pub fn address(&self) -> self::ethcontract::Address {
            self.raw_instance().address()
        }
        #[doc = r" Returns the deployment information of the contract"]
        #[doc = r" if it is known, `None` otherwise."]
        pub fn deployment_information(&self) -> Option<ethcontract::common::DeploymentInformation> {
            self.raw_instance().deployment_information()
        }
        #[doc = r" Returns a reference to the default method options used by this"]
        #[doc = r" contract."]
        pub fn defaults(&self) -> &self::ethcontract::contract::MethodDefaults {
            &self.raw_instance().defaults
        }
        #[doc = r" Returns a mutable reference to the default method options used"]
        #[doc = r" by this contract."]
        pub fn defaults_mut(&mut self) -> &mut self::ethcontract::contract::MethodDefaults {
            &mut self.raw_instance_mut().defaults
        }
        #[doc = r" Returns a reference to the raw runtime instance used by this"]
        #[doc = r" contract."]
        pub fn raw_instance(&self) -> &self::ethcontract::dyns::DynInstance {
            &self.methods.instance
        }
        #[doc = r" Returns a mutable reference to the raw runtime instance used by"]
        #[doc = r" this contract."]
        fn raw_instance_mut(&mut self) -> &mut self::ethcontract::dyns::DynInstance {
            &mut self.methods.instance
        }
    }
    impl std::fmt::Debug for Contract {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DcPerpetualVault))
                .field(&self.address())
                .finish()
        }
    }
    impl Contract {
        #[doc = "Generated by `ethcontract`"]
        #[allow(clippy::too_many_arguments)]
        pub fn builder<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
        ) -> self::ethcontract::dyns::DynDeployBuilder<Self>
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            use self::ethcontract::contract::DeployBuilder;
            use self::ethcontract::dyns::DynTransport;
            use self::ethcontract::web3::api::Web3;
            let transport = DynTransport::new(web3.transport().clone());
            let web3 = Web3::new(transport);
            let bytecode = Self::raw_contract().bytecode.clone();
            DeployBuilder::new(web3, bytecode, ()).expect("valid deployment args")
        }
    }
    impl self::ethcontract::contract::Deploy<self::ethcontract::dyns::DynTransport> for Contract {
        type Context = self::ethcontract::common::Bytecode;
        fn bytecode(cx: &Self::Context) -> &self::ethcontract::common::Bytecode {
            cx
        }
        fn abi(_: &Self::Context) -> &self::ethcontract::common::Abi {
            &Self::raw_contract().abi
        }
        fn from_deployment(
            web3: self::ethcontract::dyns::DynWeb3,
            address: self::ethcontract::Address,
            transaction_hash: self::ethcontract::H256,
            _: Self::Context,
        ) -> Self {
            Self::with_deployment_info(&web3, address, Some(transaction_hash.into()))
        }
    }
    impl Contract {
        #[doc = r" Returns an object that allows accessing typed method signatures."]
        pub fn signatures() -> Signatures {
            Signatures
        }
        #[doc = r" Retrieves a reference to type containing all the generated"]
        #[doc = r" contract methods. This can be used for methods where the name"]
        #[doc = r" would collide with a common method (like `at` or `deployed`)."]
        pub fn methods(&self) -> &Methods {
            &self.methods
        }
    }
    #[doc = r" Type containing signatures for all methods for generated contract type."]
    #[derive(Clone, Copy)]
    pub struct Signatures;
    impl Signatures {
        #[doc = "Returns signature for method `setNativeRouter(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_native_router(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::Address,), ()> {
            self::ethcontract::contract::Signature::new([230, 230, 169, 225])
        }
        #[doc = "Returns signature for method `_perpVault():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn perp_vault(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([42, 156, 17, 155])
        }
        #[doc = "Returns signature for method `_usdcToken():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn usdc_token(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([137, 35, 213, 162])
        }
        #[doc = "Returns signature for method `_dcRouter():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn _dcRouter(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([11, 61, 8, 173])
        }
        #[doc = "Returns signature for method `closePosition(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn close_position(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([171, 50, 244, 82])
        }
        #[doc = "Returns signature for method `remotes(uint16):(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn remotes(
            &self,
        ) -> self::ethcontract::contract::Signature<(u16,), self::ethcontract::tokens::Bytes<Vec<u8>>>
        {
            self::ethcontract::contract::Signature::new([157, 31, 97, 19])
        }
        #[doc = "Returns signature for method `setReceiveVersion(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_receive_version(&self) -> self::ethcontract::contract::Signature<(u16,), ()> {
            self::ethcontract::contract::Signature::new([16, 221, 177, 55])
        }
        #[doc = "Returns signature for method `stringToBytes32(string):(bytes32)`."]
        #[allow(clippy::type_complexity)]
        pub fn string_to_bytes_32(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (String,),
            self::ethcontract::tokens::Bytes<[u8; 32]>,
        > {
            self::ethcontract::contract::Signature::new([207, 181, 25, 40])
        }
        #[doc = "Returns signature for method `withdrawNativeToken(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn withdraw_native_token(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([249, 93, 204, 10])
        }
        #[doc = "Returns signature for method `getSendVersion():(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_send_version(&self) -> self::ethcontract::contract::Signature<(), u16> {
            self::ethcontract::contract::Signature::new([84, 165, 190, 218])
        }
        #[doc = "Returns signature for method `borrow(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn borrow(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([34, 161, 104, 240])
        }
        #[doc = "Returns signature for method `getFreeCollateral(address):(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_free_collateral(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address,),
            self::ethcontract::U256,
        > {
            self::ethcontract::contract::Signature::new([195, 153, 148, 68])
        }
        #[doc = "Returns signature for method `setConfig(uint16,uint16,uint256,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_config(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                u16,
                u16,
                self::ethcontract::U256,
                self::ethcontract::tokens::Bytes<Vec<u8>>,
            ),
            (),
        > {
            self::ethcontract::contract::Signature::new([203, 237, 139, 156])
        }
        #[doc = "Returns signature for method `transferOwnership(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn transfer_ownership(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::Address,), ()> {
            self::ethcontract::contract::Signature::new([242, 253, 227, 139])
        }
        #[doc = "Returns signature for method `unpause()`."]
        #[allow(clippy::type_complexity)]
        pub fn unpause(&self) -> self::ethcontract::contract::Signature<(), ()> {
            self::ethcontract::contract::Signature::new([63, 75, 168, 58])
        }
        #[doc = "Returns signature for method `setInboundConfirmations(uint16,uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_inbound_confirmations(
            &self,
        ) -> self::ethcontract::contract::Signature<(u16, u16), ()> {
            self::ethcontract::contract::Signature::new([109, 246, 83, 113])
        }
        #[doc = "Returns signature for method `repay(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn repay(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([181, 97, 253, 43])
        }
        #[doc = "Returns signature for method `owner():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn owner(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([141, 165, 203, 91])
        }
        #[doc = "Returns signature for method `initialize(address,address,address,address,address,address,uint24,uint160,uint160)`."]
        #[allow(clippy::type_complexity)]
        pub fn initialize(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                self::ethcontract::Address,
                self::ethcontract::Address,
                self::ethcontract::Address,
                self::ethcontract::Address,
                self::ethcontract::Address,
                self::ethcontract::Address,
                u32,
                self::ethcontract::U256,
                self::ethcontract::U256,
            ),
            (),
        > {
            self::ethcontract::contract::Signature::new([230, 185, 182, 119])
        }
        #[doc = "Returns signature for method `setSendVersion(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_send_version(&self) -> self::ethcontract::contract::Signature<(u16,), ()> {
            self::ethcontract::contract::Signature::new([7, 224, 219, 23])
        }
        #[doc = "Returns signature for method `renounceOwnership()`."]
        #[allow(clippy::type_complexity)]
        pub fn renounce_ownership(&self) -> self::ethcontract::contract::Signature<(), ()> {
            self::ethcontract::contract::Signature::new([113, 80, 24, 166])
        }
        #[doc = "Returns signature for method `directDepositToVault(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn direct_deposit_to_vault(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([18, 119, 183, 195])
        }
        #[doc = "Returns signature for method `slippageTolerance():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn slippage_tolerance(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([208, 49, 83, 170])
        }
        #[doc = "Returns signature for method `getDailyMarketTwap():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_daily_market_twap(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([154, 52, 217, 114])
        }
        #[doc = "Returns signature for method `setPoolLimit(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_pool_limit(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::U256,), ()> {
            self::ethcontract::contract::Signature::new([105, 1, 14, 59])
        }
        #[doc = "Returns signature for method `forceResumeReceive(uint16,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn force_resume_receive(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (u16, self::ethcontract::tokens::Bytes<Vec<u8>>),
            (),
        > {
            self::ethcontract::contract::Signature::new([66, 214, 90, 141])
        }
        #[doc = "Returns signature for method `totalAbsPositionValue():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn total_abs_position_value(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([139, 44, 250, 11])
        }
        #[doc = "Returns signature for method `getConfig(uint16,uint16,address,uint256):(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_config(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                u16,
                u16,
                self::ethcontract::Address,
                self::ethcontract::U256,
            ),
            self::ethcontract::tokens::Bytes<Vec<u8>>,
        > {
            self::ethcontract::contract::Signature::new([245, 236, 189, 188])
        }
        #[doc = "Returns signature for method `nativeStrategyTokenPrice():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn native_strategy_token_price(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([177, 86, 20, 198])
        }
        #[doc = "Returns signature for method `emergencyClose():(bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn emergency_close(&self) -> self::ethcontract::contract::Signature<(), bool> {
            self::ethcontract::contract::Signature::new([169, 204, 154, 233])
        }
        #[doc = "Returns signature for method `_clearingHouse():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn clearing_house(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([226, 125, 215, 182])
        }
        #[doc = "Returns signature for method `nativeBridge(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn native_bridge(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([199, 4, 173, 182])
        }
        #[doc = "Returns signature for method `deposit(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn deposit(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([152, 177, 224, 106])
        }
        #[doc = "Returns signature for method `lzReceive(uint16,bytes,uint64,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn lz_receive(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (
                u16,
                self::ethcontract::tokens::Bytes<Vec<u8>>,
                u64,
                self::ethcontract::tokens::Bytes<Vec<u8>>,
            ),
            (),
        > {
            self::ethcontract::contract::Signature::new([0, 29, 53, 103])
        }
        #[doc = "Returns signature for method `getReceiveVersion():(uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_receive_version(&self) -> self::ethcontract::contract::Signature<(), u16> {
            self::ethcontract::contract::Signature::new([207, 93, 20, 113])
        }
        #[doc = "Returns signature for method `getCurrentFundingRate():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_current_funding_rate(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([68, 105, 252, 157])
        }
        #[doc = "Returns signature for method `withdrawOnAddress(bytes):(bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn withdraw_on_address(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::tokens::Bytes<Vec<u8>>,),
            bool,
        > {
            self::ethcontract::contract::Signature::new([182, 214, 174, 16])
        }
        #[doc = "Returns signature for method `setPerpRefCode(string)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_perp_ref_code(&self) -> self::ethcontract::contract::Signature<(String,), ()> {
            self::ethcontract::contract::Signature::new([64, 103, 251, 180])
        }
        #[doc = "Returns signature for method `getReserve():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_reserve(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([89, 191, 93, 57])
        }
        #[doc = "Returns signature for method `backTokensToNative(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn back_tokens_to_native(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([234, 195, 197, 150])
        }
        #[doc = "Returns signature for method `poolLimit():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn pool_limit(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([213, 155, 170, 3])
        }
        #[doc = "Returns signature for method `openPosition(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn open_position(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([206, 233, 68, 99])
        }
        #[doc = "Returns signature for method `stringToBytes()`."]
        #[allow(clippy::type_complexity)]
        pub fn string_to_bytes(&self) -> self::ethcontract::contract::Signature<(), ()> {
            self::ethcontract::contract::Signature::new([23, 195, 163, 172])
        }
        #[doc = "Returns signature for method `maxUsersPoolSizeLimit():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn max_users_pool_size_limit(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([191, 189, 85, 211])
        }
        #[doc = "Returns signature for method `currentUsersDeposits():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn current_users_deposits(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([53, 52, 29, 136])
        }
        #[doc = "Returns signature for method `accountValue(address):(int256)`."]
        #[allow(clippy::type_complexity)]
        pub fn account_value(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address,),
            self::ethcontract::I256,
        > {
            self::ethcontract::contract::Signature::new([204, 76, 94, 251])
        }
        #[doc = "Returns signature for method `paused():(bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn paused(&self) -> self::ethcontract::contract::Signature<(), bool> {
            self::ethcontract::contract::Signature::new([92, 151, 90, 187])
        }
        #[doc = "Returns signature for method `perpReferralCode():(bytes32)`."]
        #[allow(clippy::type_complexity)]
        pub fn perp_referral_code(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::tokens::Bytes<[u8; 32]>>
        {
            self::ethcontract::contract::Signature::new([92, 89, 224, 28])
        }
        #[doc = "Returns signature for method `setRemote(uint16,bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_remote(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (u16, self::ethcontract::tokens::Bytes<Vec<u8>>),
            (),
        > {
            self::ethcontract::contract::Signature::new([32, 205, 208, 161])
        }
        #[doc = "Returns signature for method `adjustPosition(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn adjust_position(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([107, 3, 101, 195])
        }
        #[doc = "Returns signature for method `currentCasualDeposits():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn current_casual_deposits(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([81, 95, 115, 47])
        }
        #[doc = "Returns signature for method `getTotalUSDCValue():(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn get_total_usdc_value(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([248, 99, 6, 17])
        }
        #[doc = "Returns signature for method `pause()`."]
        #[allow(clippy::type_complexity)]
        pub fn pause(&self) -> self::ethcontract::contract::Signature<(), ()> {
            self::ethcontract::contract::Signature::new([132, 86, 203, 89])
        }
        #[doc = "Returns signature for method `setBridge(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_bridge(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([108, 182, 254, 127])
        }
        #[doc = "Returns signature for method `_deadlineTime():(uint160)`."]
        #[allow(clippy::type_complexity)]
        pub fn deadline_time(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([90, 245, 64, 136])
        }
        #[doc = "Returns signature for method `approve(bytes)`."]
        #[allow(clippy::type_complexity)]
        pub fn approve(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::tokens::Bytes<Vec<u8>>,), ()>
        {
            self::ethcontract::contract::Signature::new([1, 157, 39, 41])
        }
        #[doc = "Returns signature for method `_SHORT_VALUE():(uint32)`."]
        #[allow(clippy::type_complexity)]
        pub fn short_value(&self) -> self::ethcontract::contract::Signature<(), u32> {
            self::ethcontract::contract::Signature::new([216, 158, 205, 114])
        }
        #[doc = "Returns signature for method `nativeRouter():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn native_router(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([154, 229, 138, 2])
        }
        #[doc = "Returns signature for method `balanceOf(address):(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn balance_of(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address,),
            self::ethcontract::U256,
        > {
            self::ethcontract::contract::Signature::new([112, 160, 130, 49])
        }
        #[doc = "Returns signature for method `_sqrtPriceLimitX96toUni():(uint160)`."]
        #[allow(clippy::type_complexity)]
        pub fn sqrt_price_limit_x9_6to_uni(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::U256> {
            self::ethcontract::contract::Signature::new([38, 108, 227, 254])
        }
        #[doc = "Returns signature for method `submitNativeToken(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn submit_native_token(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([238, 236, 217, 186])
        }
        #[doc = "Returns signature for method `setOutboundConfirmations(uint16,uint16)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_outbound_confirmations(
            &self,
        ) -> self::ethcontract::contract::Signature<(u16, u16), ()> {
            self::ethcontract::contract::Signature::new([43, 34, 87, 220])
        }
        #[doc = "Returns signature for method `claim(address,uint256,bool)`."]
        #[allow(clippy::type_complexity)]
        pub fn claim(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256, bool),
            (),
        > {
            self::ethcontract::contract::Signature::new([122, 30, 225, 192])
        }
        #[doc = "Returns signature for method `setNativeLZEndpoint(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn set_native_lz_endpoint(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::Address,), ()> {
            self::ethcontract::contract::Signature::new([112, 220, 94, 201])
        }
        #[doc = "Returns signature for method `_wToken():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn w_token(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([8, 129, 146, 26])
        }
        #[doc = "Returns signature for method `_vToken():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn v_token(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([84, 72, 94, 143])
        }
    }
    #[doc = r" Type containing all contract methods for generated contract type."]
    #[derive(Clone)]
    pub struct Methods {
        instance: self::ethcontract::dyns::DynInstance,
    }
    #[allow(clippy::too_many_arguments, clippy::type_complexity)]
    impl Methods {
        #[doc = "Generated by `ethcontract`"]
        pub fn set_native_router(
            &self,
            new: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([230, 230, 169, 225], (new,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn perp_vault(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([42, 156, 17, 155], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn usdc_token(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([137, 35, 213, 162], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn dc_router(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([11, 61, 8, 173], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn close_position(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([171, 50, 244, 82], (base_asset, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn remotes(
            &self,
            p0: u16,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::tokens::Bytes<Vec<u8>>>
        {
            self.instance
                .view_method([157, 31, 97, 19], (p0,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_receive_version(
            &self,
            version: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([16, 221, 177, 55], (version,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn string_to_bytes_32(
            &self,
            source: String,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::tokens::Bytes<[u8; 32]>>
        {
            self.instance
                .view_method([207, 181, 25, 40], (source,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn withdraw_native_token(
            &self,
            p0: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([249, 93, 204, 10], (p0, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_send_version(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<u16> {
            self.instance
                .view_method([84, 165, 190, 218], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn borrow(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([34, 161, 104, 240], (base_asset, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_free_collateral(
            &self,
            trader: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([195, 153, 148, 68], (trader,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_config(
            &self,
            p0: u16,
            chain_id: u16,
            config_type: self::ethcontract::U256,
            config: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([203, 237, 139, 156], (p0, chain_id, config_type, config))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn transfer_ownership(
            &self,
            new_owner: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([242, 253, 227, 139], (new_owner,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn unpause(&self) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([63, 75, 168, 58], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_inbound_confirmations(
            &self,
            remote_chain_id: u16,
            confirmations: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([109, 246, 83, 113], (remote_chain_id, confirmations))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn repay(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([181, 97, 253, 43], (base_asset, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn owner(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([141, 165, 203, 91], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn initialize(
            &self,
            dc_router: self::ethcontract::Address,
            clearing_house: self::ethcontract::Address,
            perp_vault: self::ethcontract::Address,
            usdc_token: self::ethcontract::Address,
            v_token: self::ethcontract::Address,
            w_token: self::ethcontract::Address,
            fee_to_pair: u32,
            deadline_time: self::ethcontract::U256,
            sqrt_price_limit_x9_6to_uni: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method(
                    [230, 185, 182, 119],
                    (
                        dc_router,
                        clearing_house,
                        perp_vault,
                        usdc_token,
                        v_token,
                        w_token,
                        fee_to_pair,
                        deadline_time,
                        sqrt_price_limit_x9_6to_uni,
                    ),
                )
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_send_version(
            &self,
            version: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([7, 224, 219, 23], (version,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn renounce_ownership(&self) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([113, 80, 24, 166], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn direct_deposit_to_vault(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([18, 119, 183, 195], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn slippage_tolerance(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([208, 49, 83, 170], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_daily_market_twap(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([154, 52, 217, 114], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_pool_limit(
            &self,
            new_limit: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([105, 1, 14, 59], (new_limit,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn force_resume_receive(
            &self,
            src_chain_id: u16,
            src_address: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([66, 214, 90, 141], (src_chain_id, src_address))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn total_abs_position_value(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([139, 44, 250, 11], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_config(
            &self,
            p0: u16,
            chain_id: u16,
            p2: self::ethcontract::Address,
            config_type: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::tokens::Bytes<Vec<u8>>>
        {
            self.instance
                .view_method([245, 236, 189, 188], (p0, chain_id, p2, config_type))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn native_strategy_token_price(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([177, 86, 20, 198], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn emergency_close(&self) -> self::ethcontract::dyns::DynMethodBuilder<bool> {
            self.instance
                .method([169, 204, 154, 233], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn clearing_house(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([226, 125, 215, 182], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn native_bridge(
            &self,
            action_data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([199, 4, 173, 182], (action_data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn deposit(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([152, 177, 224, 106], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn lz_receive(
            &self,
            src_chain_id: u16,
            src_address: self::ethcontract::tokens::Bytes<Vec<u8>>,
            p2: u64,
            payload: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([0, 29, 53, 103], (src_chain_id, src_address, p2, payload))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_receive_version(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<u16> {
            self.instance
                .view_method([207, 93, 20, 113], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_current_funding_rate(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([68, 105, 252, 157], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn withdraw_on_address(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<bool> {
            self.instance
                .method([182, 214, 174, 16], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_perp_ref_code(
            &self,
            code: String,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([64, 103, 251, 180], (code,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_reserve(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([89, 191, 93, 57], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn back_tokens_to_native(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([234, 195, 197, 150], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn pool_limit(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([213, 155, 170, 3], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn open_position(
            &self,
            base_asset: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            position_type: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([206, 233, 68, 99], (base_asset, amount, position_type))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn string_to_bytes(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<()> {
            self.instance
                .view_method([23, 195, 163, 172], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn max_users_pool_size_limit(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([191, 189, 85, 211], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn current_users_deposits(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([53, 52, 29, 136], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn account_value(
            &self,
            trader: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::I256> {
            self.instance
                .view_method([204, 76, 94, 251], (trader,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn paused(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<bool> {
            self.instance
                .view_method([92, 151, 90, 187], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn perp_referral_code(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::tokens::Bytes<[u8; 32]>>
        {
            self.instance
                .view_method([92, 89, 224, 28], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_remote(
            &self,
            chain_id: u16,
            remote_address: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([32, 205, 208, 161], (chain_id, remote_address))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn adjust_position(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([107, 3, 101, 195], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn current_casual_deposits(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([81, 95, 115, 47], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn get_total_usdc_value(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([248, 99, 6, 17], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn pause(&self) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([132, 86, 203, 89], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_bridge(
            &self,
            action_data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([108, 182, 254, 127], (action_data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn deadline_time(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([90, 245, 64, 136], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn approve(
            &self,
            data: self::ethcontract::tokens::Bytes<Vec<u8>>,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([1, 157, 39, 41], (data,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn short_value(&self) -> self::ethcontract::dyns::DynViewMethodBuilder<u32> {
            self.instance
                .view_method([216, 158, 205, 114], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn native_router(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([154, 229, 138, 2], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn balance_of(
            &self,
            token: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([112, 160, 130, 49], (token,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn sqrt_price_limit_x9_6to_uni(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([38, 108, 227, 254], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn submit_native_token(
            &self,
            p0: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([238, 236, 217, 186], (p0, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_outbound_confirmations(
            &self,
            remote_chain_id: u16,
            confirmations: u16,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([43, 34, 87, 220], (remote_chain_id, confirmations))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn claim(
            &self,
            p0: self::ethcontract::Address,
            amount: self::ethcontract::U256,
            p2: bool,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([122, 30, 225, 192], (p0, amount, p2))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn set_native_lz_endpoint(
            &self,
            endpoint: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([112, 220, 94, 201], (endpoint,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn w_token(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([8, 129, 146, 26], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn v_token(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([84, 72, 94, 143], ())
                .expect("generated call")
        }
    }
    impl std::ops::Deref for Contract {
        type Target = Methods;
        fn deref(&self) -> &Self::Target {
            &self.methods
        }
    }
    impl Contract {
        #[doc = r" Returns a method builder to setup a call to a smart"]
        #[doc = r" contract's fallback function."]
        pub fn fallback<D>(&self, data: D) -> self::ethcontract::dyns::DynMethodBuilder<()>
        where
            D: Into<Vec<u8>>,
        {
            self.raw_instance()
                .fallback(data)
                .expect("generated fallback method")
        }
    }
    #[doc = r" Module containing all generated data models for this contract's"]
    #[doc = r" events."]
    pub mod event_data {
        use super::ethcontract;
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Bridged {
            pub receiver_lz_id: u16,
            pub receiver_address: self::ethcontract::Address,
            pub stable_amount: self::ethcontract::U256,
        }
        impl Bridged {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    128, 240, 137, 105, 159, 208, 242, 189, 43, 236, 165, 225, 79, 159, 16, 241,
                    249, 198, 107, 97, 20, 48, 164, 43, 8, 38, 254, 13, 175, 63, 34, 203,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Bridged(uint16,address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "Bridged(uint16,address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Bridged {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (receiver_lz_id, receiver_address, stable_amount) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Bridged {
                    receiver_lz_id,
                    receiver_address,
                    stable_amount,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Usdcdeposited {
            pub time_stamp: self::ethcontract::Address,
            pub amount: self::ethcontract::U256,
        }
        impl Usdcdeposited {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    128, 236, 197, 50, 207, 46, 8, 133, 102, 1, 223, 66, 100, 105, 112, 214, 118,
                    166, 134, 216, 238, 172, 191, 210, 3, 143, 174, 79, 242, 136, 218, 86,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`USDCDeposited(address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "USDCDeposited(address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Usdcdeposited {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (time_stamp, amount) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Usdcdeposited { time_stamp, amount })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct PositionAdjusted {
            pub operation_type: bool,
            pub position_type: bool,
            pub amount: self::ethcontract::U256,
        }
        impl PositionAdjusted {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    92, 195, 105, 53, 91, 11, 95, 246, 93, 159, 79, 93, 192, 106, 65, 101, 147,
                    230, 209, 47, 118, 53, 53, 222, 72, 214, 154, 43, 244, 153, 138, 193,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`PositionAdjusted(bool,bool,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "PositionAdjusted(bool,bool,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for PositionAdjusted {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (operation_type, position_type, amount) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(PositionAdjusted {
                    operation_type,
                    position_type,
                    amount,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Usdcwithdrawn {
            pub sender: self::ethcontract::Address,
            pub amount: self::ethcontract::U256,
        }
        impl Usdcwithdrawn {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    42, 167, 251, 151, 96, 14, 167, 2, 180, 84, 53, 159, 195, 208, 42, 233, 250,
                    72, 54, 126, 113, 85, 80, 93, 56, 206, 232, 150, 229, 181, 170, 231,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`USDCWithdrawn(address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "USDCWithdrawn(address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Usdcwithdrawn {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (sender, amount) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Usdcwithdrawn { sender, amount })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct OwnershipTransferred {
            pub previous_owner: self::ethcontract::Address,
            pub new_owner: self::ethcontract::Address,
        }
        impl OwnershipTransferred {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    139, 224, 7, 156, 83, 22, 89, 20, 19, 68, 205, 31, 208, 164, 242, 132, 25, 73,
                    127, 151, 34, 163, 218, 175, 227, 180, 24, 111, 107, 100, 87, 224,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`OwnershipTransferred(address,address)`"]
            pub fn abi_signature() -> &'static str {
                "OwnershipTransferred(address,address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for OwnershipTransferred {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (previous_owner, new_owner) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(OwnershipTransferred {
                    previous_owner,
                    new_owner,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct RouterChanged {
            pub sender: self::ethcontract::Address,
            pub old_relayer: self::ethcontract::Address,
            pub new_relayer: self::ethcontract::Address,
        }
        impl RouterChanged {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    50, 204, 97, 24, 137, 57, 207, 201, 112, 168, 44, 37, 189, 108, 36, 91, 195,
                    110, 110, 102, 28, 233, 68, 202, 253, 49, 25, 17, 209, 104, 222, 224,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`RouterChanged(address,address,address)`"]
            pub fn abi_signature() -> &'static str {
                "RouterChanged(address,address,address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for RouterChanged {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (sender, old_relayer, new_relayer) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(RouterChanged {
                    sender,
                    old_relayer,
                    new_relayer,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct TransferredToNativeRouter {
            pub token: self::ethcontract::Address,
            pub amount: self::ethcontract::U256,
        }
        impl TransferredToNativeRouter {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    203, 107, 134, 119, 160, 197, 69, 188, 127, 227, 60, 16, 49, 161, 8, 137, 74,
                    232, 238, 62, 228, 50, 216, 21, 52, 55, 131, 201, 76, 69, 226, 148,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`TransferredToNativeRouter(address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "TransferredToNativeRouter(address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for TransferredToNativeRouter {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token, amount) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(TransferredToNativeRouter { token, amount })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Initialized {
            pub version: u8,
        }
        impl Initialized {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    127, 38, 184, 63, 249, 110, 31, 43, 106, 104, 47, 19, 56, 82, 246, 121, 138, 9,
                    196, 101, 218, 149, 146, 20, 96, 206, 251, 56, 71, 64, 36, 152,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Initialized(uint8)`"]
            pub fn abi_signature() -> &'static str {
                "Initialized(uint8)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Initialized {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (version,) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Initialized { version })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Paused {
            pub account: self::ethcontract::Address,
        }
        impl Paused {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    98, 231, 140, 234, 1, 190, 227, 32, 205, 78, 66, 2, 112, 181, 234, 116, 0, 13,
                    17, 176, 201, 247, 71, 84, 235, 219, 252, 84, 75, 5, 162, 88,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Paused(address)`"]
            pub fn abi_signature() -> &'static str {
                "Paused(address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Paused {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (account,) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Paused { account })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(Clone, Debug, Default, Eq, PartialEq)]
        pub struct Unpaused {
            pub account: self::ethcontract::Address,
        }
        impl Unpaused {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    93, 185, 238, 10, 73, 91, 242, 230, 255, 156, 145, 167, 131, 76, 27, 164, 253,
                    210, 68, 165, 232, 170, 78, 83, 123, 211, 138, 234, 228, 176, 115, 170,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Unpaused(address)`"]
            pub fn abi_signature() -> &'static str {
                "Unpaused(address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Unpaused {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (account,) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Unpaused { account })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
    }
    impl Contract {
        #[doc = r" Retrieves a handle to a type containing for creating event"]
        #[doc = r" streams for all the contract events."]
        pub fn events(&self) -> Events<'_> {
            Events {
                instance: self.raw_instance(),
            }
        }
    }
    pub struct Events<'a> {
        instance: &'a self::ethcontract::dyns::DynInstance,
    }
    impl Events<'_> {
        #[doc = r" Generated by `ethcontract`."]
        pub fn bridged(&self) -> self::event_builders::BridgedBuilder {
            self::event_builders::BridgedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        128, 240, 137, 105, 159, 208, 242, 189, 43, 236, 165, 225, 79, 159, 16,
                        241, 249, 198, 107, 97, 20, 48, 164, 43, 8, 38, 254, 13, 175, 63, 34, 203,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn usdc_deposited(&self) -> self::event_builders::UsdcdepositedBuilder {
            self::event_builders::UsdcdepositedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        128, 236, 197, 50, 207, 46, 8, 133, 102, 1, 223, 66, 100, 105, 112, 214,
                        118, 166, 134, 216, 238, 172, 191, 210, 3, 143, 174, 79, 242, 136, 218, 86,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn position_adjusted(&self) -> self::event_builders::PositionAdjustedBuilder {
            self::event_builders::PositionAdjustedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        92, 195, 105, 53, 91, 11, 95, 246, 93, 159, 79, 93, 192, 106, 65, 101, 147,
                        230, 209, 47, 118, 53, 53, 222, 72, 214, 154, 43, 244, 153, 138, 193,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn usdc_withdrawn(&self) -> self::event_builders::UsdcwithdrawnBuilder {
            self::event_builders::UsdcwithdrawnBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        42, 167, 251, 151, 96, 14, 167, 2, 180, 84, 53, 159, 195, 208, 42, 233,
                        250, 72, 54, 126, 113, 85, 80, 93, 56, 206, 232, 150, 229, 181, 170, 231,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn ownership_transferred(&self) -> self::event_builders::OwnershipTransferredBuilder {
            self::event_builders::OwnershipTransferredBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        139, 224, 7, 156, 83, 22, 89, 20, 19, 68, 205, 31, 208, 164, 242, 132, 25,
                        73, 127, 151, 34, 163, 218, 175, 227, 180, 24, 111, 107, 100, 87, 224,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn router_changed(&self) -> self::event_builders::RouterChangedBuilder {
            self::event_builders::RouterChangedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        50, 204, 97, 24, 137, 57, 207, 201, 112, 168, 44, 37, 189, 108, 36, 91,
                        195, 110, 110, 102, 28, 233, 68, 202, 253, 49, 25, 17, 209, 104, 222, 224,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn transferred_to_native_router(
            &self,
        ) -> self::event_builders::TransferredToNativeRouterBuilder {
            self::event_builders::TransferredToNativeRouterBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        203, 107, 134, 119, 160, 197, 69, 188, 127, 227, 60, 16, 49, 161, 8, 137,
                        74, 232, 238, 62, 228, 50, 216, 21, 52, 55, 131, 201, 76, 69, 226, 148,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn initialized(&self) -> self::event_builders::InitializedBuilder {
            self::event_builders::InitializedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        127, 38, 184, 63, 249, 110, 31, 43, 106, 104, 47, 19, 56, 82, 246, 121,
                        138, 9, 196, 101, 218, 149, 146, 20, 96, 206, 251, 56, 71, 64, 36, 152,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn paused(&self) -> self::event_builders::PausedBuilder {
            self::event_builders::PausedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        98, 231, 140, 234, 1, 190, 227, 32, 205, 78, 66, 2, 112, 181, 234, 116, 0,
                        13, 17, 176, 201, 247, 71, 84, 235, 219, 252, 84, 75, 5, 162, 88,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn unpaused(&self) -> self::event_builders::UnpausedBuilder {
            self::event_builders::UnpausedBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        93, 185, 238, 10, 73, 91, 242, 230, 255, 156, 145, 167, 131, 76, 27, 164,
                        253, 210, 68, 165, 232, 170, 78, 83, 123, 211, 138, 234, 228, 176, 115,
                        170,
                    ]))
                    .expect("generated event filter"),
            )
        }
    }
    #[doc = r" Module containing the generated event stream builders with type safe"]
    #[doc = r" filter methods for this contract's events."]
    pub mod event_builders {
        use super::ethcontract;
        use super::event_data;
        #[doc = "A builder for creating a filtered stream of `Bridged` events."]
        pub struct BridgedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Bridged>,
        );
        impl BridgedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = "Adds a filter for the receiverLZId event parameter."]
            pub fn receiver_lz_id(mut self, topic: self::ethcontract::Topic<u16>) -> Self {
                self.0 = (self.0).topic0(topic);
                self
            }
            #[doc = "Adds a filter for the receiverAddress event parameter."]
            pub fn receiver_address(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic1(topic);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Bridged>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Bridged>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Usdcdeposited` events."]
        pub struct UsdcdepositedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Usdcdeposited>,
        );
        impl UsdcdepositedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = "Adds a filter for the timeStamp event parameter."]
            pub fn time_stamp(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic0(topic);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Usdcdeposited>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Usdcdeposited>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `PositionAdjusted` events."]
        pub struct PositionAdjustedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::PositionAdjusted>,
        );
        impl PositionAdjustedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::PositionAdjusted>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::PositionAdjusted>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Usdcwithdrawn` events."]
        pub struct UsdcwithdrawnBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Usdcwithdrawn>,
        );
        impl UsdcwithdrawnBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Usdcwithdrawn>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Usdcwithdrawn>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `OwnershipTransferred` events."]
        pub struct OwnershipTransferredBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::OwnershipTransferred>,
        );
        impl OwnershipTransferredBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = "Adds a filter for the previousOwner event parameter."]
            pub fn previous_owner(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic0(topic);
                self
            }
            #[doc = "Adds a filter for the newOwner event parameter."]
            pub fn new_owner(
                mut self,
                topic: self::ethcontract::Topic<self::ethcontract::Address>,
            ) -> Self {
                self.0 = (self.0).topic1(topic);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::OwnershipTransferred>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::OwnershipTransferred>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `RouterChanged` events."]
        pub struct RouterChangedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::RouterChanged>,
        );
        impl RouterChangedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::RouterChanged>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::RouterChanged>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `TransferredToNativeRouter` events."]
        pub struct TransferredToNativeRouterBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<
                self::event_data::TransferredToNativeRouter,
            >,
        );
        impl TransferredToNativeRouterBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<
                    self::ethcontract::Event<self::event_data::TransferredToNativeRouter>,
                >,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::TransferredToNativeRouter>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Initialized` events."]
        pub struct InitializedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Initialized>,
        );
        impl InitializedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Initialized>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Initialized>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Paused` events."]
        pub struct PausedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Paused>,
        );
        impl PausedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Paused>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Paused>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Unpaused` events."]
        pub struct UnpausedBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Unpaused>,
        );
        impl UnpausedBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Unpaused>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Unpaused>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
    }
    impl Contract {
        #[doc = r" Returns a log stream with all events."]
        pub fn all_events(&self) -> self::ethcontract::dyns::DynAllEventsBuilder<Event> {
            self::ethcontract::dyns::DynAllEventsBuilder::new(
                self.raw_instance().web3(),
                self.address(),
                self.deployment_information(),
            )
        }
    }
    #[doc = r" A contract event."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    pub enum Event {
        Bridged(self::event_data::Bridged),
        Initialized(self::event_data::Initialized),
        OwnershipTransferred(self::event_data::OwnershipTransferred),
        Paused(self::event_data::Paused),
        PositionAdjusted(self::event_data::PositionAdjusted),
        RouterChanged(self::event_data::RouterChanged),
        TransferredToNativeRouter(self::event_data::TransferredToNativeRouter),
        Usdcdeposited(self::event_data::Usdcdeposited),
        Usdcwithdrawn(self::event_data::Usdcwithdrawn),
        Unpaused(self::event_data::Unpaused),
    }
    impl self::ethcontract::contract::ParseLog for Event {
        fn parse_log(
            log: self::ethcontract::RawLog,
        ) -> Result<Self, self::ethcontract::errors::ExecutionError> {
            let standard_event = log . topics . get (0) . copied () . map (| topic | match topic { self :: ethcontract :: H256 ([128 , 240 , 137 , 105 , 159 , 208 , 242 , 189 , 43 , 236 , 165 , 225 , 79 , 159 , 16 , 241 , 249 , 198 , 107 , 97 , 20 , 48 , 164 , 43 , 8 , 38 , 254 , 13 , 175 , 63 , 34 , 203]) => Ok (Event :: Bridged (log . clone () . decode (Contract :: raw_contract () . abi . event ("Bridged") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([127 , 38 , 184 , 63 , 249 , 110 , 31 , 43 , 106 , 104 , 47 , 19 , 56 , 82 , 246 , 121 , 138 , 9 , 196 , 101 , 218 , 149 , 146 , 20 , 96 , 206 , 251 , 56 , 71 , 64 , 36 , 152]) => Ok (Event :: Initialized (log . clone () . decode (Contract :: raw_contract () . abi . event ("Initialized") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([139 , 224 , 7 , 156 , 83 , 22 , 89 , 20 , 19 , 68 , 205 , 31 , 208 , 164 , 242 , 132 , 25 , 73 , 127 , 151 , 34 , 163 , 218 , 175 , 227 , 180 , 24 , 111 , 107 , 100 , 87 , 224]) => Ok (Event :: OwnershipTransferred (log . clone () . decode (Contract :: raw_contract () . abi . event ("OwnershipTransferred") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([98 , 231 , 140 , 234 , 1 , 190 , 227 , 32 , 205 , 78 , 66 , 2 , 112 , 181 , 234 , 116 , 0 , 13 , 17 , 176 , 201 , 247 , 71 , 84 , 235 , 219 , 252 , 84 , 75 , 5 , 162 , 88]) => Ok (Event :: Paused (log . clone () . decode (Contract :: raw_contract () . abi . event ("Paused") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([92 , 195 , 105 , 53 , 91 , 11 , 95 , 246 , 93 , 159 , 79 , 93 , 192 , 106 , 65 , 101 , 147 , 230 , 209 , 47 , 118 , 53 , 53 , 222 , 72 , 214 , 154 , 43 , 244 , 153 , 138 , 193]) => Ok (Event :: PositionAdjusted (log . clone () . decode (Contract :: raw_contract () . abi . event ("PositionAdjusted") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([50 , 204 , 97 , 24 , 137 , 57 , 207 , 201 , 112 , 168 , 44 , 37 , 189 , 108 , 36 , 91 , 195 , 110 , 110 , 102 , 28 , 233 , 68 , 202 , 253 , 49 , 25 , 17 , 209 , 104 , 222 , 224]) => Ok (Event :: RouterChanged (log . clone () . decode (Contract :: raw_contract () . abi . event ("RouterChanged") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([203 , 107 , 134 , 119 , 160 , 197 , 69 , 188 , 127 , 227 , 60 , 16 , 49 , 161 , 8 , 137 , 74 , 232 , 238 , 62 , 228 , 50 , 216 , 21 , 52 , 55 , 131 , 201 , 76 , 69 , 226 , 148]) => Ok (Event :: TransferredToNativeRouter (log . clone () . decode (Contract :: raw_contract () . abi . event ("TransferredToNativeRouter") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([128 , 236 , 197 , 50 , 207 , 46 , 8 , 133 , 102 , 1 , 223 , 66 , 100 , 105 , 112 , 214 , 118 , 166 , 134 , 216 , 238 , 172 , 191 , 210 , 3 , 143 , 174 , 79 , 242 , 136 , 218 , 86]) => Ok (Event :: Usdcdeposited (log . clone () . decode (Contract :: raw_contract () . abi . event ("USDCDeposited") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([42 , 167 , 251 , 151 , 96 , 14 , 167 , 2 , 180 , 84 , 53 , 159 , 195 , 208 , 42 , 233 , 250 , 72 , 54 , 126 , 113 , 85 , 80 , 93 , 56 , 206 , 232 , 150 , 229 , 181 , 170 , 231]) => Ok (Event :: Usdcwithdrawn (log . clone () . decode (Contract :: raw_contract () . abi . event ("USDCWithdrawn") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([93 , 185 , 238 , 10 , 73 , 91 , 242 , 230 , 255 , 156 , 145 , 167 , 131 , 76 , 27 , 164 , 253 , 210 , 68 , 165 , 232 , 170 , 78 , 83 , 123 , 211 , 138 , 234 , 228 , 176 , 115 , 170]) => Ok (Event :: Unpaused (log . clone () . decode (Contract :: raw_contract () . abi . event ("Unpaused") . expect ("generated event decode")) ?)) , _ => Err (self :: ethcontract :: errors :: ExecutionError :: from (self :: ethcontract :: common :: abi :: Error :: InvalidData)) , }) ;
            if let Some(Ok(data)) = standard_event {
                return Ok(data);
            }
            Err(self::ethcontract::errors::ExecutionError::from(
                self::ethcontract::common::abi::Error::InvalidData,
            ))
        }
    }
}
use self::dc_perpetual_vault::Contract as DcPerpetualVault;
